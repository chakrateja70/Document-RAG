1. Bing Connector
The Bing Connector enables integration with Microsoft's Bing Search API through a RESTful interface. It allows applications to perform web, image, video, and news searches programmatically. The connector simplifies API communication and authentication, making search functionalities easily accessible.
Inputs Required
* Subscription Key: A valid Bing API subscription key for authentication.
* Connector ID: Unique identifier for managing specific connector configurations.
* Force Flag (Optional): Used to bypass validation checks during configuration updates.
* Search Parameters:
   * query (string): The search term.
   * count (integer, optional): Number of results (default: 10).
   * offset (integer, optional): Offset for pagination (default: 0).
   * language (string, optional): Language of results (default: en-US).
   * search_type (string, optional): Type of search (default: WEBPAGES).
Output Format
* Total Results: The total number of search results found.
* Results: A list of retrieved search results with relevant data.
* Response Types:
   * Success Response: Confirms successful operation completion.
   * Error Response: Provides error details and status codes.
   * Validation Response: Returns configuration validation results.
API Endpoints
GET /search
Description: Performs a web search based on the query parameters provided.
* Inputs:
   * query (string): Search term.
   * count (integer, optional): Number of results.
   * offset (integer, optional): Pagination offset.
* Outputs:
   * total_results (integer): Number of matching results.
   * results (array): List of search results.
GET /images
Description: Retrieves image results related to the search query.
* Inputs:
   * query (string): Search term.
   * count (integer, optional): Number of results.
   * offset (integer, optional): Pagination offset.
* Outputs:
   * total_results (integer): Number of matching images.
   * results (array): List of image search results.
GET /videos
Description: Fetches video results matching the search query.
* Inputs:
   * query (string): Search term.
   * count (integer, optional): Number of results.
   * offset (integer, optional): Pagination offset.
* Outputs:
   * total_results (integer): Number of matching videos.
   * results (array): List of video search results.
GET /news
Description: Returns news articles relevant to the search term.
* Inputs:
   * query (string): Search term.
   * count (integer, optional): Number of results.
   * offset (integer, optional): Pagination offset.
* Outputs:
   * total_results (integer): Number of matching news articles.
   * results (array): List of news search results.
GET /relatedsearches
Description: Suggests related search terms based on the input query.
* Inputs:
   * query (string): Search term.
* Outputs:
   * suggestions (array): List of related search terms.
Conclusion
The Bing Connector serves as a robust tool for integrating Bing Search capabilities into applications. It provides essential configuration management features, secure authentication, and efficient handling of search queries. By leveraging the Bing Search API, developers can enhance search functionality within their applications while maintaining high security and usability standards.


2. File Upload Connector
The File Upload Connector enables seamless file uploading and processing within applications. It provides functionalities to configure file uploads, validate settings, and efficiently manage file ingestion. This ensures secure and structured file handling, improving overall application efficiency.
Inputs Required:
* File IDs: A list of unique file IDs for files to be uploaded.
* File URLs: Direct URLs of files to be uploaded and processed.
Output Format:
* Upload Confirmation: Acknowledgment message for successfully uploaded files.
* Processing Status: Indicates the current status of file ingestion and processing.
API Endpoints:
1. POST /file_upload/config

   * Description: Registers or updates the configuration for the File Upload Connector.
   * Inputs Required: Configuration details.
   * Output: Success message upon configuration update.
   2. GET /file_upload/config/{connectorID}

      * Description: Retrieves the configuration of a specific connector.
      * Inputs Required: Connector ID.
      * Output: Configuration details of the specified connector.
      3. DELETE /file_upload/config/{connectorID}

         * Description: Deletes a specific connector configuration.
         * Inputs Required: Connector ID.
         * Output: Confirmation of successful deletion.
         4. POST /file_upload/config/{connectorID}/validate

            * Description: Validates the configuration of a specific connector.
            * Inputs Required: Connector ID and configuration details.
            * Output: Validation status and possible error messages.
            5. POST /file_upload/config/{connectorID}/refresh

               * Description: Refreshes the configuration settings for a specific connector.
               * Inputs Required: Connector ID.
               * Output: Confirmation of successful refresh.
               6. POST /file_upload/pull

                  * Description: Processes all uploaded files for ingestion.
                  * Inputs Required: File IDs or File URLs.
                  * Output: Processing status and ingestion confirmation.
Conclusion: The File Upload Connector simplifies file management by enabling efficient and secure file uploads. Through proper configuration, validation, and ingestion, developers can enhance their applications' file-handling capabilities, improving workflow efficiency and system performance.


3. Google Docs Connector
The Google Docs Connector allows seamless interaction with Google Docs, enabling users to create, update, and retrieve documents programmatically. It simplifies document management by automating workflows and enhancing collaboration. This integration helps streamline content creation and editing within applications.
Inputs Required
                  * Google Account Credentials: OAuth 2.0 access token and refresh token for authentication.
                  * Document ID: The unique identifier of a Google Doc.
                  * Document Content: The text and formatting details for creating or updating documents.
Output Format
                  * Document ID: The ID of the created or retrieved document.
                  * Document Content: The content and metadata of the document.
                  * Status Message: Confirmation of document creation, update, or retrieval.
API Endpoints
POST /google_docs/create
Description: Creates a new Google Document.
                  * Inputs:
                  * title (string): The title of the document.
                  * content (string): The initial content of the document.
                  * Outputs:
                  * document_id (string): The ID of the newly created document.
                  * status (string): Confirmation message.
POST /google_docs/update/{documentID}
Description: Updates an existing Google Document.
                  * Inputs:
                  * document_id (string): The ID of the document to update.
                  * content (string): The text to be updated.
                  * after (string, optional): Specifies where to insert the text.
                  * Outputs:
                  * status (string): Confirmation message.
GET /google_docs/get/{documentID}
Description: Retrieves the content and metadata of a Google Document.
                  * Inputs: document_id (string): The ID of the document to retrieve.
                  * Outputs:
                  * title (string): The title of the document.
                  * content (string): The content of the document.
                  * metadata (object): Additional metadata associated with the document.
Conclusion
The Google Docs Connector streamlines document automation by integrating Google Docs functionalities within applications. With secure authentication, efficient document management, and collaboration capabilities, this connector enhances productivity and simplifies document handling tasks.




4. Jira Connector
The Jira Connector enables seamless integration with the Jira platform, allowing users to automate issue tracking, project management, and workflow automation. It simplifies operations such as creating, updating, retrieving, and deleting issues while providing additional functionalities like filtering issues and fetching user details.
Inputs Required
                  * Jira account URL
                  * API token for authentication
                  * Jira account email
                  * Project key
Output Format
The Jira Connector returns structured JSON responses, including status indicators (e.g., success/failure), issue details, and user-related information.
API Endpoints
Description: Creates a new issue in a Jira project.
                  * Inputs:
                  * summary (string): Issue summary.
                  * description (string): Issue description.
                  * issue_type (string): Type of issue.
                  * assignee_accountID (string): Assignee's account ID.
                  * reporter_accountID (string): Reporter's account ID.
                  * Outputs:
                  * document_id (string): The ID of the newly created issue.
Description: Deletes an issue from a project.
                  * Inputs:
POST /jira/create
                  * status (string): Confirmation message.
                  * POST /jira/delete/{ticket_id}ticket_id (string): The ID of the issue to delete.
                  * Outputs:
                  * status (string): Confirmation message.
POST /jira/update/{ticket_id}
Description: Updates an existing issue with new information.
                  * Inputs:
                  * ticket_id (string): The ID of the issue to update.
                  * summary (string, optional): Updated issue summary.
                  * description (string, optional): Updated issue description.
                  * assignee (string, optional): Updated assignee.
                  * reporter (string, optional): Updated reporter.
                  * watchers (list of strings, optional): List of watchers.
                  * parent_task (string, optional): Parent task ID.
                  * story_points (float, optional): Updated story points.
                  * time_estimate (string, optional): Updated time estimate.
                  * comments (list of strings, optional): List of comments.
                  * logs (string, optional): Log details.
                  * started (string, optional): Start time.
                  * Outputs:
                  * status (string): Confirmation message.
GET /jira/get/{ticket_id}
Description: Fetches details of an issue using its ID.
                  * Inputs:
                  * ticket_id (string): The ID of the issue to retrieve.
                  * Outputs:
                  * ticket_details (object): The details of the issue.
POST /jira/read
Description: Fetches issues based on mention names and a date range.
                  * Inputs:
                  * mention_name (list of strings, optional): List of mention names.
                  * from_datetime (string): Start date-time.
                  * to_datetime (string): End date-time.
                  * Outputs:
                  * comments_with_mention (object): Issues with mentions.
POST /jira/pull
Description: Fetches configuration-related data.
                  * Inputs: None
                  * Outputs: None
POST /jira/filter
Description: Filters issues based on account ID and status.
                  * Inputs:
                  * accountId (string): Account ID.
                  * status (string, optional): Issue status.
                  * Outputs:
                  * total (integer): Total number of issues.
                  * tickets (list of dictionaries): List of filtered issues.
POST /jira/email_lookup
Description: Fetches account ID using an email.
                  * Inputs:
                  * email (string): Email address.
                  * Outputs:
                  * accountId (string): Account ID.
                  * displayName (string): Display name.
                  * email (string): Email address.
POST /jira/get_all_users
Description: Retrieves all Jira users with pagination support.
                  * Inputs:
                  * startAt (integer, optional, default=0): Starting index.
                  * maxResults (integer, optional, default=100): Maximum number of results.
                  * Outputs:
                  * users (list of dictionaries): List of Jira users.
                  * total (integer): Total number of users.
Conclusion
The Jira Connector provides an efficient way to integrate Jira's issue tracking and project management capabilities into applications. By leveraging its various endpoints, users can automate workflows, optimize project tracking, and enhance productivity with ease. Proper authentication, error handling, and secure API token management are recommended for effective usage.


5. Trigger Coworker
Description
The Trigger Coworker enables automated task delegation within the platform by allowing users to trigger and schedule other coworkers programmatically. This connector supports immediate execution, scheduled tasks, and batch operations, making it essential for workflow automation and task orchestration. It provides flexible configuration options for timing control and data management.
Inputs Required
                  * Coworker ID: Unique identifier (minimum 3 characters) for the target coworker
                  * Goal: Description of the task to be performed
                  * Execution Parameters: Configuration for timing and completion tracking
                  * Schedule Details: Timing specifications for scheduled tasks (optional)
                  * Table Information: Query and table ID for data-driven executions (optional)
Output Format
                  * Execution Status: Status of the triggered coworker
                  * Schedule Details: Information about created schedules
                  * Batch Results: Array of execution results for multiple triggers
                  * Completion Status: Final status of completed executions (when waiting enabled)
API Endpoints
POST /api/v1/coworkers/trigger
Description: Triggers immediate execution of a coworker.
                  * Inputs:
                  * coworker_id (string): Target coworker identifier
                  * goal (string): Task description
                  * wait_for_completion (boolean): Execution flow control
                  * Outputs:
                  * status (string): Execution status
                  * execution_id (string): Unique execution identifier
POST /api/v1/coworkers/schedule
Description: Creates a schedule for coworker execution.
                  * Inputs:
                  * coworker_id (string): Target coworker identifier
                  * goal (string): Task description
                  * frequency (string, optional): Cron expression
                  * schedule (number, optional): Unix timestamp
                  * table_id (string): Source table identifier
                  * Outputs:
                  * schedule_id (string): Unique schedule identifier
                  * status (string): Schedule creation status
POST /api/v1/coworkers/trigger-batch
Description: Triggers multiple coworker executions with variables.
                  * Inputs:
                  * coworker_id (string): Target coworker identifier
                  * goal_template (string): Template with variables
                  * variables (array): Variable sets for execution
                  * Outputs:
                  * batch_id (string): Unique batch identifier
                  * results (array): Execution results
Conclusion
The Trigger Coworker provides a comprehensive solution for workflow automation and task orchestration. With its support for immediate, scheduled, and batch executions, it enables efficient task delegation and process automation. The connector's flexible configuration options and clear API structure make it a powerful tool for building automated workflows within the platform.


6. Facebook Connector
The Facebook Connector enables seamless integration with the Facebook API, allowing users to manage pages and posts programmatically. It provides comprehensive functionality for creating content, retrieving page information, and monitoring social media engagement. This connector streamlines social media management tasks and automates workflow processes through Facebook's platform.
Inputs Required
                  * Access Token: Facebook API access token for authentication
                  * Page ID: Unique identifier of the Facebook page
                  * Post Content: Text, media, or link content for creating posts
                  * Post ID: Identifier for retrieving specific post information
                  * Limit: Optional parameter for controlling the number of posts retrieved
Output Format
                  * Post Information: Details about created or retrieved posts (ID, URL, content)
                  * Page Details: Comprehensive page information (name, stats, contact info)
                  * Engagement Metrics: Post performance data (likes, comments, shares)
                  * Status Messages: Confirmation of successful operations
API Endpoints
POST /facebook/posts/create
Description: Creates a new post on a Facebook page.
                  * Inputs:
                  * access_token (string): Facebook API access token
                  * page_id (string): Target page identifier
                  * message (string): Post content
                  * Outputs:
                  * post_id (string): Created post identifier
                  * post_url (string): URL of the created post
GET /facebook/pages/{pageId}
Description: Retrieves detailed information about a Facebook page.
                  * Inputs:
                  * access_token (string): Facebook API access token
                  * page_id (string): Target page identifier
                  * Outputs:
                  * page_details (object): Comprehensive page information
                  * engagement_metrics (object): Page performance statistics
GET /facebook/posts/{postId}
Description: Retrieves information about a specific post.
                  * Inputs:
                  * post_id (string): Target post identifier
                  * Outputs:
                  * post_content (object): Post details and metrics
                  * engagement_data (object): Post performance statistics
GET /facebook/posts
Description: Retrieves a list of posts from a Facebook page.
                  * Inputs:
                  * page_id (string): Target page identifier
                  * limit (number, optional): Maximum number of posts
                  * Outputs:
                  * posts (array): List of post objects with details
                  * pagination (object): Pagination information
Conclusion
The Facebook Connector provides a robust solution for integrating Facebook functionality into applications. With support for post management, page information retrieval, and engagement tracking, it enables efficient social media automation. The connector's comprehensive API and structured data formats make it an essential tool for building sophisticated social media management workflows.


7. Instagram Connector
Description
The Instagram Connector enables seamless integration with the Instagram platform through the Instagram Graph API. It provides comprehensive functionality for creating posts, managing content, and retrieving user data. This connector streamlines social media automation by allowing programmatic access to Instagram's features while maintaining platform compliance and best practices.
Inputs Required
                  * Access Token: Instagram API access token for authentication
                  * Page ID: Facebook page ID linked to Instagram account
                  * Image URL: Direct URL to image for post creation
                  * Caption: Optional text content for posts
                  * Post ID: Identifier for retrieving specific post information
                  * Username: Instagram username for user data retrieval
Output Format
                  * Post Information: Creation ID and post URL for new content
                  * Media Details: Type, URL, and engagement metrics of posts
                  * User Data: Profile information and statistics
                  * Status Messages: Operation confirmation and error details
                  * Engagement Metrics: Likes, comments, and interaction data
API Endpoints
POST /instagram/posts/create
Description: Creates a new Instagram post with image and caption.
                  * Inputs:
                  * image_url (string): Source URL of the image
                  * caption (string, optional): Post caption text
                  * Outputs:
                  * creation_id (string): Created post identifier
                  * post_url (string): URL of the published post
GET /instagram/posts/{postId}
Description: Retrieves detailed information about a specific post.
                  * Inputs:
                  * post_id (string): Target post identifier
                  * Outputs:
                  * media_details (object): Post content and metadata
                  * engagement_metrics (object): Interaction statistics
GET /instagram/users/{username}
Description: Retrieves user profile data and statistics.
                  * Inputs:
                  * username (string): Target Instagram username
                  * Outputs:
                  * profile_data (object): User information and statistics
                  * media_data (object): User's media content details
Conclusion
The Instagram Connector provides a robust solution for integrating Instagram functionality into applications. With support for content creation, post management, and user data retrieval, it enables efficient social media automation. The connector's comprehensive API and structured data formats make it an essential tool for building sophisticated social media management workflows.


8. JobDiva Connector
Description
The JobDiva Connector enables seamless integration with JobDiva's recruitment platform through their API services. It provides comprehensive functionality for managing jobs, candidates, and recruitment workflows. This connector streamlines recruitment automation by allowing programmatic access to JobDiva's features while maintaining platform compliance and best practices.
Inputs Required
                  * Client ID: Unique identifier provided by JobDiva
                  * Username: Account email for authentication
                  * Password: Account password for authentication
                  * Job IDs: Identifiers for specific job listings
                  * Candidate IDs: Identifiers for specific candidates
                  * Search Parameters: Various filters for job and candidate searches
                  * Date Ranges: Time periods for data retrieval
                  * User Field Names: Custom field identifiers for detailed information
Output Format
                  * Jobs Data: Comprehensive job listing information
                  * Candidate Details: Profile information and qualifications
                  * Search Results: Filtered lists of jobs or candidates
                  * Status Messages: Operation confirmation and error details
                  * User Fields: Custom field data when requested
API Endpoints
GET /jobdiva/jobs/list
Description: Retrieves list of open jobs within specified parameters.
Inputs:
                  * start_date (string, optional): Format YYYY-MM-DDT00:00:00
                  * end_date (string, optional): Format YYYY-MM-DDT00:00:00
                  * limit (integer): Maximum number of results (default: 50)
Outputs:
                  * jobs_data (array): List of job listings with details
GET /jobdiva/jobs/detail
Description: Retrieves detailed information for specific jobs.
Inputs:
                  * job_ids (array): List of job identifiers
                  * jobdivarefs (array, optional): JobDiva reference numbers
                  * userFieldsName (array, optional): Custom field identifiers
Outputs:
                  * result (array): Detailed job information including custom fields
GET /jobdiva/candidates/detail
Description: Retrieves detailed candidate information.
Inputs:
                  * candidateIds (array): List of candidate identifiers
                  * userFieldsName (array, optional): Custom field identifiers
Outputs:
                  * result (array): Detailed candidate profiles
GET /jobdiva/candidates/search/quick
Description: Performs quick search across candidate database.
Inputs:
                  * search_value (string): Search terms for name, email, phone, or address
Outputs:
                  * candidates (array): Matching candidate profiles
GET /jobdiva/jobs/search/quick
Description: Performs quick search across job listings.
Inputs:
                  * search_value (string): Search terms for job ID, reference number, department, or title
                  * maxReturned (integer, optional): Result limit
Outputs:
                  * jobs (array): Matching job listings
GET /jobdiva/candidates/search
Description: Performs advanced candidate search with multiple criteria.
Inputs:
                  * firstName (string, optional)
                  * lastName (string, optional)
                  * email (string, optional)
                  * phone (string, optional)
                  * city (string, optional)
                  * state (string, optional)
                  * address (string, optional)
                  * zipCode (string, optional)
                  * country (string, optional)
                  * createdDate (string, optional)
                  * maxreturned (integer, optional)
                  * offset (integer, optional)
                  * candidateQuals (array, optional)
Outputs:
                  * candidate_details (array): Detailed candidate information matching search criteria
Conclusion
The JobDiva Connector provides a robust solution for integrating recruitment workflows into applications. With support for comprehensive job and candidate management, advanced search capabilities, and detailed data retrieval, it enables efficient automation of recruitment processes. The connector's structured API endpoints and consistent data formats make it an essential tool for building sophisticated recruitment management systems.


9. Knowledge Base Connector
The Knowledge Base Connector enables seamless interaction with the coworker knowledge base through a structured API interface. It provides comprehensive functionality for content management and retrieval, allowing users to store, tag, and search knowledge base entries. This connector streamlines knowledge management by providing efficient methods for content organization and discovery while maintaining searchability through a robust tagging system.
Inputs Required
                  * Content: Main text or data to be stored
                  * Tags: Keywords or categories for content organization
                  * Limit: Maximum number of results for retrieval
                  * Offset Point ID: Pagination reference point
                  * Search Parameters: Tag-based search criteria
Output Format
                  * Operation Status: Success/failure confirmation
                  * Retrieved Content: Matched knowledge base entries
                  * Pagination Data: Reference points for result sets
                  * Error Messages: Detailed operation feedback
                  * Search Results: Tag-filtered content lists
API Endpoints
POST /knowledgebase/add
Description: Adds new content to the knowledge base with associated tags.
Inputs:
                  * content (string, required): Main content to be stored
                  * tags (array, required): List of associated tags for categorization
Outputs:
                  * result (object): Operation status and confirmation
                  * success (boolean): Operation success indicator
                  * message (string): Status description
                  * content_id (string): Unique identifier for stored content
GET /knowledgebase/retrieve
Description: Retrieves content from the knowledge base based on tags.
Inputs:
                  * tags (array, required): Search tags for content filtering
                  * limit (integer, optional): Maximum number of results to return (default: 10)
                  * offset_point_id (string, optional): Pagination reference point
Outputs:
                  * data (object): Retrieved knowledge base content
                  * items (array): Matched content entries
                  * next_offset_point_id (string): Reference for next page
                  * total_count (integer): Total matching entries
                  * has_more (boolean): Additional results indicator
Conclusion
The Knowledge Base Connector provides a robust solution for managing and retrieving organizational knowledge. With support for comprehensive content management, efficient tagging systems, and flexible search capabilities, it enables effective knowledge organization and discovery. The connector's structured API endpoints and consistent data formats make it an essential tool for building sophisticated knowledge management systems. Through proper implementation of tagging and search strategies, organizations can maintain an organized and easily accessible knowledge repository.




10. WhatsApp Connector
The WhatsApp Connector enables seamless integration with the WhatsApp messaging platform through its official API. It provides comprehensive functionality for managing chats, sending messages, and handling user interactions. This connector streamlines WhatsApp business communication by allowing programmatic access to WhatsApp's features while maintaining platform compliance and best practices.
Inputs Required
                  * Phone Number: WhatsApp account phone number
                  * Email: Email address for PIN verification
                  * PIN: Authentication PIN (default: 0000 for existing users)
                  * Chat IDs: Identifiers for specific conversations
                  * Message IDs: Identifiers for specific messages
                  * Attendee IDs: User identifiers for chat participants
                  * Message Content: Text to be sent
                  * Timeline Parameters: Timestamps for message filtering
                  * Pagination Limits: Result size control parameters
Output Format
                  * Chat Information: Details and metadata about conversations
                  * Message Content: Text and delivery status of messages
                  * Participant Data: User information and chat memberships
                  * Status Updates: Operation confirmation and error details
                  * Timeline Data: Message chronology and threading information
API Endpoints
GET /whatsapp/chats/list
Description: Retrieves list of WhatsApp chats with optional filtering.
Inputs:
                  * is_unread (boolean, optional): Filter for unread chats
                  * before_timeline (string, optional): Upper time boundary
                  * after_timeline (string, optional): Lower time boundary
                  * account_type (string): Account type identifier
                  * limit (integer, optional): Maximum number of results
Outputs:
                  * accounts (array): List of chat information and metadata
GET /whatsapp/messages/list
Description: Retrieves messages from a specified chat.
Inputs:
                  * chat_id (string, required): Target chat identifier
                  * before_timeline (string, optional): Upper time boundary
                  * after_timeline (string, optional): Lower time boundary
                  * limit (integer, optional): Maximum number of results
                  * sender_id (string, optional): Filter by message sender
Outputs:
                  * messages (array): List of message content and metadata
GET /whatsapp/attendees/retrieve
Description: Retrieves participant information from a chat.
Inputs:
                  * chat_id (string, required): Target chat identifier
Outputs:
                  * attendees (array): List of chat participants
GET /whatsapp/chats/retrieve
Description: Retrieves detailed information about a specific chat.
Inputs:
                  * chat_id (string, required): Target chat identifier
Outputs:
                  * chat_id (string): Chat identifier
                  * chat_content (object): Detailed chat information
GET /whatsapp/messages/retrieve
Description: Retrieves detailed information about a specific message.
Inputs:
                  * message_id (string, required): Target message identifier
Outputs:
                  * message_id (string): Message identifier
                  * message_content (string): Message text
                  * timestamp (string): Message timestamp
POST /whatsapp/messages/send
Description: Sends a new message to a specified chat.
Inputs:
                  * chat_id (string, required): Target chat identifier
                  * text (string, required): Message content
                  * thread_id (string, optional): Thread identifier for replies
Outputs:
                  * message_id (string): Created message identifier
                  * status (string): Delivery status
                  * text (string): Sent message content
POST /whatsapp/chats/start
Description: Creates a new chat with specified participants.
Inputs:
                  * attendees_ids (string, required): Comma-separated participant identifiers
                  * text (string, required): Initial message content
Outputs:
                  * chat_id (string): Created chat identifier
                  * status (string): Creation status
                  * message (string): Initial message content
Initial Setup
                  1. Open WhatsApp mobile application
                  2. Navigate to Settings > Linked Devices
                  3. Select "Link a Device"
                  4. Scan the QR code displayed after configuration submission
Conclusion
The WhatsApp Connector provides a robust solution for integrating WhatsApp messaging capabilities into applications. With support for comprehensive chat management, message handling, and participant administration, it enables efficient business communication automation. The connector's structured API endpoints and consistent data formats make it an essential tool for building sophisticated messaging workflows while maintaining WhatsApp platform compliance.
License and Contribution
This connector is released under the MIT License. Contributions are welcome through the project's GitHub repository via issues and pull requests.


11. HTTP Connector 
Description
The HTTP Connector enables seamless integration with various web services by allowing users to send HTTP requests and handle responses programmatically. This connector supports multiple HTTP methods, custom headers, and authentication, making it essential for interacting with APIs, web services, and online resources. It provides a flexible and straightforward way to automate data retrieval, submission, and processing within your workflows.
Inputs Required
                  * Base URL: The root URL for the HTTP request (e.g., the main address of the service)
                  * Headers: Optional key-value pairs for HTTP headers (e.g., specifying content type or authorization)
                  * Method: The HTTP method to use (e.g., GET, POST, PUT, DELETE; defaults to GET)
                  * Endpoint: Optional path to append to the base URL (e.g., a specific resource path)
                  * JSON Data: Optional data payload for the request body (e.g., data to submit)
                  * Authentication: Optional token or credentials for secured endpoints (e.g., a bearer token)
Output Format
                  * Response: The response object containing status code, headers, and body from the HTTP request
API Endpoints
POST /api/v1/http/send
Description: Sends an HTTP request based on the provided configuration and returns the response.
Inputs:
                  * base_url (string): The base URL for the request
                  * headers (string, optional): Stringified key-value pairs of HTTP headers
                  * method (string): HTTP method (GET, POST, PUT, DELETE; defaults to GET)
                  * endpoint (string, optional): Endpoint path to append to the base URL
                  * json_data (string, optional): Stringified data to send in the request body
                  * auth (string, optional): Authentication token or credentials
Outputs:
                  * response (object): Response object including status, headers, and body
POST /http/config
Description: Registers or updates the HTTP connector configuration.
Inputs:
                  * connector_data (object): Configuration details for the connector
                  * connectorID (string, optional): Unique identifier of the connector to update
                  * force (boolean): Skip validation if set to true
Outputs:
                  * connector (object): Updated connector configuration or error details
GET /http/config/{connectorID}
Description: Retrieves the configuration of a specific HTTP connector.
Inputs:
                  * connectorID (string): Unique identifier of the connector
Outputs:
                  * configured (boolean): Indicates if the connector is configured
                  * config (object): Configuration details or default values if not configured
DELETE /http/config/{connectorID}
Description: Deletes the configuration of a specific HTTP connector.
Inputs:
                  * connectorID (string): Unique identifier of the connector
Outputs:
                  * status (object): Result of the deletion operation
POST /http/config/{connectorID}/validate
Description: Validates the provided HTTP connector configuration.
Inputs:
                  * connector_data (object): Configuration details to validate
Outputs:
                  * status (string): Validation result ("success" or "error")
                  * message (string): Details about the validation outcome
POST /http/config/{connectorID}/refresh
Description: Refreshes the HTTP connector configuration.
Inputs:
                  * None
Outputs:
                  * status (string): Refresh operation result (e.g., "success")
Conclusion
The HTTP Connector provides a comprehensive solution for interacting with web services and APIs within your automation workflows. With its support for various HTTP methods, customizable headers, and authentication options, it enables efficient data exchange and process automation. The connector’s robust API endpoints and straightforward configuration make it an essential tool for developers looking to streamline communication with external systems and enhance productivity.


12. LinkedIn Connector
The LinkedIn Connector enables seamless integration with the LinkedIn platform, allowing users to automate activities such as posting updates, fetching connections, managing messages, and performing advanced searches. This connector supports a wide range of actions for interacting with LinkedIn’s API, making it a vital tool for professional networking, data retrieval, and workflow automation.
Inputs Required
                  * Email: Your LinkedIn email address used for authentication
                  * Pin: The PIN for linking a new or existing account (default is "0000" for existing users)
                  * Action-Specific Inputs: Vary by action (e.g., text for posts, identifiers for profiles, filters for searches)
Output Format
                  * Action-Specific Outputs: Vary by action (e.g., post IDs, arrays of data like connections or messages, status messages)
API Endpoints
POST /linkedin/create_post
Description: Creates a new post on LinkedIn.
Inputs:
                  * text (string): The content of the post
Outputs:
                  * post_id (string): The ID of the created post
                  * status (string): The status of the post creation
POST /linkedin/fetch_connections
Description: Fetches connections from LinkedIn and stores them in a specified table.
Inputs:
                  * limit (string, optional): Number of connections to retrieve (default: "100")
                  * table_name (string): Name of the table to store connections
                  * cursor (string, optional): Pagination cursor (default: null)
                  * mapping (object): Mapping structure for table fields
                  * table_id (string): ID of the table for data insertion
Outputs:
                  * message (string): Status message of the operation
GET /linkedin/list_all_chats
Description: Lists all chats from LinkedIn.
Inputs:
                  * account_type (string): Type of account (e.g., "LINKEDIN")
                  * is_unread (string, optional): Filter unread chats (default: "false")
                  * before_timeline (string, optional): Filter chats before a timestamp
                  * after_timeline (string, optional): Filter chats after a timestamp
                  * limit (string, optional): Number of chats to retrieve
Outputs:
                  * accounts (array): Array of chat accounts
GET /linkedin/list_all_comments
Description: Lists all comments on a specified post.
Inputs:
                  * post_id (string): ID of the post
                  * limit (string, optional): Number of comments to retrieve
Outputs:
                  * comments (array): Array of comments
GET /linkedin/list_all_invitations
Description: Lists all invitations.
Inputs:
                  * limit (string, optional): Number of invitations to retrieve
Outputs:
                  * invitations (array): Array of invitations
GET /linkedin/list_all_messages
Description: Lists messages in a specified chat.
Inputs:
                  * chat_id (string, optional): ID of the chat
                  * before_timeline (string, optional): Filter messages before a timestamp
                  * after_timeline (string, optional): Filter messages after a timestamp
                  * limit (string, optional): Number of messages to retrieve
                  * sender_id (string, optional): Filter by sender ID
                  * chat_index (string, optional): Chat index for pagination
Outputs:
                  * messages (array): Array of messages
GET /linkedin/list_all_posts
Description: Lists all posts.
Inputs:
                  * provider_id (string, optional): Provider ID for filtering
                  * linkedin_url (string, optional): LinkedIn URL for filtering
                  * is_company (string, optional): Filter company posts (default: "false")
                  * limit (string, optional): Number of posts to retrieve
                  * cursor (string, optional): Pagination cursor (default: "1")
Outputs:
                  * posts (array): Array of posts
GET /linkedin/list_all_reactions
Description: Fetches reactions on a specified post.
Inputs:
                  * post_id (string, optional): ID of the post
                  * limit (string, optional): Number of reactions to retrieve
                  * cursor (string, optional): Pagination cursor
                  * post_index (string, optional): Post index for pagination
                  * linkedin_url (string, optional): LinkedIn URL for filtering
Outputs:
                  * reactions (array): Array of reactions
GET /linkedin/list_attendee_messages
Description: Lists messages from a specified attendee.
Inputs:
                  * attendee_id (string): ID of the attendee
                  * cursor (string, optional): Pagination cursor
                  * before_timeline (string, optional): Filter messages before a timestamp
                  * after_timeline (string, optional): Filter messages after a timestamp
                  * limit (string, optional): Number of messages to retrieve
Outputs:
                  * messages (array): Array of messages
GET /linkedin/list_attendees_from_chat
Description: Lists attendees from a specified chat.
Inputs:
                  * limit (string, optional): Number of attendees to retrieve
                  * chat_id (string, optional): ID of the chat
                  * chat_index (string, optional): Chat index for pagination
Outputs:
                  * attendees (array): Array of attendees
GET /linkedin/list_relations
Description: Lists relations.
Inputs:
                  * limit (string, optional): Number of relations to retrieve
Outputs:
                  * relations (array): Array of relations
POST /linkedin/post_comment
Description: Posts a comment on a specified post.
Inputs:
                  * post_id (string): ID of the post
                  * text (string): Content of the comment
Outputs:
                  * comment_id (string): ID of the comment
                  * status (string): Status of the comment posting
POST /linkedin/post_reaction
Description: Posts a reaction on a specified post.
Inputs:
                  * post_id (string): ID of the post
                  * reaction_type (string): Type of reaction (e.g., "like")
Outputs:
                  * reaction_id (string): ID of the reaction
                  * status (string): Status of the reaction posting
GET /linkedin/profile_company_retrieve
Description: Retrieves a company profile.
Inputs:
                  * profile_linkedin_url (string): LinkedIn URL of the profile
Outputs:
                  * data (object): Company profile data
POST /linkedin/retrieve_all_profiles
Description: Retrieves multiple profiles.
Inputs:
                  * identifiers (array): List of profile identifiers
                  * linkedin_sections (array, optional): List of LinkedIn sections to retrieve
Outputs:
                  * profiles_data (array): Array of profile data
GET /linkedin/retrieve_attendee
Description: Retrieves an attendee from a chat.
Inputs:
                  * chat_id (string): ID of the chat
Outputs:
                  * attendees (array): Array of attendees
GET /linkedin/retrieve_chat
Description: Retrieves a specified chat.
Inputs:
                  * chat_id (string, optional): ID of the chat
                  * chat_index (string, optional): Chat index for pagination
Outputs:
                  * chat_id (string): ID of the chat
                  * chat_content (object): Content of the chat
GET /linkedin/retrieve_company_profile
Description: Retrieves a company profile.
Inputs:
                  * company_id (string, optional): ID of the company
                  * linkedin_url (string, optional): LinkedIn URL of the company
Outputs:
                  * company_profile (object): Company profile data
GET /linkedin/retrieve_message
Description: Retrieves a specified message.
Inputs:
                  * message_id (string): ID of the message
Outputs:
                  * message_id (string): ID of the message
                  * message_content (string): Content of the message
                  * timestamp (string): Timestamp of the message
GET /linkedin/retrieve_profile
Description: Retrieves a specified profile.
Inputs:
                  * identifier (string): Identifier of the profile
                  * linkedin_sections (array, optional): List of LinkedIn sections to retrieve
Outputs:
                  * profile (object): Profile data
GET /linkedin/retrieve_self_profile
Description: Retrieves the user’s own profile.
Inputs: None
Outputs:
                  * profile (object): Profile data
POST /linkedin/send_invitation
Description: Sends an invitation.
Inputs:
                  * provider_id (string, optional): Provider ID
                  * message (string, optional): Invitation message
                  * linkedin_url (string, optional): LinkedIn URL of the recipient
Outputs:
                  * invitation_id (string): ID of the invitation
                  * status (string): Status of the invitation
                  * message (string): Invitation message
POST /linkedin/send_message
Description: Sends a message in a chat.
Inputs:
                  * chat_id (string, optional): ID of the chat
                  * chat_index (string, optional): Chat index for pagination
                  * text (string): Content of the message
                  * thread_id (string, optional): Thread ID for replies
Outputs:
                  * message_id (string): ID of the message
                  * status (string): Status of the message
                  * text (string): Content of the message
POST /linkedin/start_chat
Description: Starts a new chat.
Inputs:
                  * attendees_ids (array, optional): IDs of attendees
                  * text (string): Initial message content
                  * linkedin_url (string, optional): LinkedIn URL of the recipient
Outputs:
                  * chat_id (string): ID of the chat
                  * status (string): Status of the chat
                  * message (string): Initial message
POST /linkedin/withdraw_invitation
Description: Withdraws a sent invitation.
Inputs:
                  * invitation_id (string): ID of the invitation
Outputs:
                  * message (string): Status message of the operation
POST /linkedin/search_companies
Description: Searches for companies on LinkedIn with specified filters.
Inputs:
                  * keywords (string, optional): Search keywords
                  * industry (array, optional): List of industry IDs
                  * location (array, optional): List of location IDs
                  * headcount (array, optional): Range of company headcounts
                  * network_distance (array, optional): Connection distance (1, 2, or 3)
                  * has_job_offers (boolean, optional): Filter companies with job offers
                  * cursor (string, optional): Pagination cursor
                  * limit (integer, optional): Number of results
Outputs:
                  * companies (array): List of company details
POST /linkedin/search_jobs
Description: Searches for jobs on LinkedIn with specified criteria.
Inputs:
                  * api (string): API version (default: "classic")
                  * category (string): Set to "jobs"
                  * keywords (string, optional): Search keywords
                  * sort_by (string, optional): Sort by "relevance" or "date"
                  * date_posted (integer, optional): Days since job posting
                  * region (string, optional): Global region ID
                  * location (array, optional): List of location IDs
                  * location_within_area (integer, optional): Search radius in miles
                  * industry (array, optional): List of industry IDs
                  * seniority (array, optional): List of seniority levels
                  * function (array, optional): List of job function IDs
                  * role (array, optional): List of job title IDs
                  * job_type (array, optional): List of employment types
                  * company (array, optional): List of company IDs
                  * presence (array, optional): Work location types (on_site, hybrid, remote)
                  * easy_apply (boolean, optional): Filter for easy apply jobs
                  * cursor (string, optional): Pagination cursor
                  * limit (integer, optional): Number of jobs
Outputs:
                  * searched_jobs (object): Job listings
                  * account_data (object): Associated account data
POST /linkedin/search_people_with_sales_navigator_account
Description: Searches for people using Sales Navigator filters.
Inputs:
                  * api (string): Set to "sales_navigator"
                  * category (string): Set to "people"
                  * keywords (string, optional): Search keywords
                  * industry (object, optional): Industry filters
                  * location (object, optional): Location filters
                  * headcount (array, optional): Range of company headcounts
                  * seniority (object, optional): Seniority filters
                  * company (object, optional): Company filters
                  * persona (object, optional): Persona filters
                  * limit (integer, optional): Number of results
Outputs:
                  * searched_people (array): List of user details
POST /linkedin/search_people
Description: Searches for people using standard LinkedIn filters.
Inputs:
                  * keywords (string, optional): Search keywords
                  * industry (array, optional): List of industry IDs
                  * location (array, optional): List of locations
                  * headcount (array, optional): Range of company headcounts
                  * advanced_keywords (object, optional): Filters for first name, last name, title, company, school
Outputs:
                  * searched_people (array): List of user details
Conclusion
The LinkedIn Connector provides a comprehensive solution for automating professional networking and data retrieval on the LinkedIn platform. With its extensive set of actions—from posting content to advanced searches—it empowers users to streamline workflows and enhance engagement efficiently. Its flexible configuration and robust API endpoints make it an invaluable tool for developers aiming to leverage LinkedIn’s capabilities within automated systems.


13. Apollo Connector 
The Apollo Connector integrates with the Apollo API to provide access to enriched contact and company data, enabling organizations to find new leads, enhance existing information, and make data-driven decisions. This connector supports a wide range of actions, from managing contacts and accounts to enriching data and searching Apollo’s extensive B2B database, making it a powerful tool for automating sales and marketing workflows.
Inputs Required
                  * API Key: A valid Apollo API key for authentication
                  * Action-Specific Inputs: Vary by action (e.g., contact IDs, campaign IDs, search filters)
Output Format
                  * Action-Specific Outputs: Vary by action (e.g., enriched data, lists of contacts or accounts, status results)
API Endpoints
POST /apollo/add_contacts_to_sequence
Description: Adds contacts to a specified email campaign sequence.
Inputs:
                  * contact_ids (array, required): List of contact IDs
                  * emailer_campaign_id (string, required): ID of the email campaign
                  * send_email_from_email_account_id (string, required): ID of the email account to send from
                  * sequence_active_in_other_campaigns (boolean, optional): Allow addition if active in other sequences
                  * sequence_no_email (boolean, optional): Allow addition without an email
                  * sequence_finished_in_other_campaigns (boolean, optional): Allow addition if finished in other sequences
                  * sequence_unverified_email (boolean, optional): Allow addition with unverified emails
                  * sequence_job_change (boolean, optional): Allow addition despite recent job changes
                  * sequence_same_company_in_same_campaign (boolean, optional): Flag sequences for the same company
                  * sequence_id (string, required): ID of the sequence
Outputs:
                  * response_data (object): Details about added contacts and campaign status
POST /apollo/bulk_create_task
Description: Creates multiple tasks simultaneously.
Inputs:
                  * priority (string, required): Task priority ("high", "medium", "low")
                  * user_id (string, required): ID of the assigned user
                  * due_at (string, required): ISO 8601 date-time (e.g., "2025-02-15T08:10:30Z")
                  * type (string, required): Task type (e.g., "call", "outreach_manual_email")
                  * contact_ids (array, required): List of contact IDs
                  * note (string, required): Task description
                  * status (string, required): Task status ("scheduled", "completed", "archived")
Outputs:
                  * response_data (object): Information about created tasks
POST /apollo/bulk_update_accounts
Description: Updates multiple accounts in bulk.
Inputs:
                  * account_ids (array, required): List of account IDs
                  * account_stage_id (string, required): ID of the account stage
Outputs:
                  * update_result (object): Result of the bulk update
POST /apollo/create_account
Description: Creates a new account.
Inputs:
                  * name (string, required): Account name
                  * domain (string, required): Account domain (e.g., "apollo.io")
                  * phone_number (string, required): Primary phone number
                  * raw_address (string, required): Corporate location (e.g., "Dallas, United States")
Outputs:
                  * account_data (object): Data of the created account
POST /apollo/create_contact
Description: Creates a new contact.
Inputs:
                  * first_name (string, required): Contact’s first name
                  * last_name (string, required): Contact’s last name
                  * title (string, optional): Job title
                  * organization_name (string, optional): Employer name
                  * account_id (string, optional): Associated account ID
                  * email (string, optional): Email address
                  * website_url (string, optional): Employer website URL
                  * label_names (array, optional): List names for organization
                  * contact_stage_id (string, optional): Contact stage ID
                  * present_raw_address (string, optional): Personal location
                  * direct_phone (string, optional): Primary phone number
                  * corporate_phone (string, optional): Work phone number
                  * mobile_phone (string, optional): Mobile phone number
                  * home_phone (string, optional): Home phone number
                  * other_phone (string, optional): Other phone number
Outputs:
                  * contact_data (object): Data of the created contact
POST /apollo/create_opportunity
Description: Creates a new opportunity.
Inputs:
                  * owner_id (string, required): ID of the opportunity owner
                  * name (string, required): Opportunity name
                  * amount (string, required): Monetary value (no commas or symbols)
                  * opportunity_stage_id (string, required): Stage ID
                  * closed_date (string, required): Estimated close date (YYYY-MM-DD)
                  * account_id (string, required): Associated account ID
Outputs:
                  * contact_data (object): Data of the created opportunity
GET /apollo/fetch_account_stages
Description: Retrieves all account stages.
Inputs: None
Outputs:
                  * account_stages (array): List of account stages
GET /apollo/fetch_contact_stages
Description: Retrieves all contact stages.
Inputs: None
Outputs:
                  * contact_stages (array): List of contact stages
GET /apollo/fetch_opportunities
Description: Retrieves all opportunities.
Inputs: None
Outputs:
                  * opportunities_data (array): List of opportunities
GET /apollo/fetch_opportunity_by_id
Description: Retrieves a specific opportunity by ID.
Inputs:
                  * opportunity_id (string, required): Opportunity ID
Outputs:
                  * opportunity_data (object): Data of the specified opportunity
GET /apollo/fetch_users
Description: Retrieves all users.
Inputs: None
Outputs:
                  * users_data (array): List of user data
GET /apollo/organization_job_postings
Description: Fetches job postings for a specified organization.
Inputs:
                  * organization_id (string, required): Organization ID
Outputs:
                  * job_postings_data (object): Job postings data
POST /apollo/organization_search
Description: Searches for organizations.
Inputs:
                  * organization_ids (array, optional): List of organization IDs
                  * organization_num_employees_ranges (array, optional): Employee count ranges (e.g., "1,10")
                  * organization_locations (array, optional): Headquarters locations
                  * organization_not_locations (array, optional): Locations to exclude
                  * q_organization_keyword_tags (array, optional): Keyword tags
                  * prospected_by_current_team (array, optional): Prospected status
                  * q_organization_name (string, optional): Company name filter
                  * page (integer, optional): Page number
                  * per_page (integer, optional): Results per page
Outputs:
                  * organization_search_data (array): List of organization data
POST /apollo/organizations_enrichment
Description: Enriches organization data.
Inputs:
                  * domain (array, required): List of company domains (e.g., "apollo.io")
Outputs:
                  * enriched_data (array): List of enriched organization data
POST /apollo/people_enrichment
Description: Enriches contact and company information.
Inputs:
                  * detail (array, required): List of enrichment details (e.g., first_name, email, linkedin_url)
                  * Includes fields like: first_name, last_name, email, organization_name, reveal_personal_emails, etc.
                  * webhook_url (string, optional): URL for phone number verification response
Outputs:
                  * enriched_data (array): List of enriched data
POST /apollo/people_search
Description: Searches for people.
Inputs:
                  * person_titles (array, optional): List of job titles
                  * q_keywords (string, optional): Search keywords
                  * prospected_by_current_team (array, optional): Prospected status
                  * person_locations (array, optional): Locations
                  * person_seniorities (array, optional): Seniority levels
                  * contact_email_status (array, optional): Email statuses
                  * q_organization_domains (array, optional): Employer domains
                  * organization_locations (array, optional): Employer HQ locations
                  * organization_ids (array, optional): Employer IDs
                  * organization_num_employees_ranges (array, optional): Employee count ranges
                  * page (integer, optional): Page number
                  * per_page (integer, optional): Results per page
Outputs:
                  * people_data (array): List of people data
POST /apollo/remove_contacts_to_sequence
Description: Removes or stops contacts in a campaign.
Inputs:
                  * emailer_campaign_ids (array, required): List of campaign IDs
                  * contact_ids (array, required): List of contact IDs
                  * mode (string, required): Operation mode ("remove", "mark_as_finished", "stop")
Outputs:
                  * response_data (object): Response data
POST /apollo/search_account
Description: Searches for accounts.
Inputs:
                  * q_organization_name (string, required): Organization name keywords
                  * account_stage_ids (array, optional): List of stage IDs
                  * sort_by_field (string, optional): Field to sort by
                  * sort_ascending (boolean, optional): Sort direction
                  * page (integer, optional): Page number
Outputs:
                  * account_data (array): List of account data
POST /apollo/search_contacts
Description: Searches for contacts.
Inputs:
                  * q_keywords (string, optional): Search keywords
                  * contact_stage_ids (array, optional): List of stage IDs
                  * sort_by_field (string, optional): Field to sort by
                  * sort_ascending (boolean, optional): Sort direction
                  * page (integer, optional): Page number
Outputs:
                  * contacts (array): List of contact data
POST /apollo/search_sequences
Description: Searches for email campaign sequences.
Inputs:
                  * name (string, required): Sequence name keywords
Outputs:
                  * campaigns (array): List of matching campaigns
POST /apollo/search_tasks
Description: Searches for tasks.
Inputs:
                  * sort_by_field (string, required): Field to sort by (e.g., "task_due_at")
                  * open_factor_names (array, required): List of task types
Outputs:
                  * tasks_data (array): List of task data
POST /apollo/update_account
Description: Updates an existing account.
Inputs:
                  * account_id (string, required): ID of the account
                  * name (string, optional): Updated account name
                  * domain (string, optional): Updated domain
                  * phone_number (string, optional): Updated phone number
Outputs:
                  * account_data (object): Updated account data
POST /apollo/update_account_owners
Description: Updates owners of accounts.
Inputs:
                  * account_ids (array, required): List of account IDs
                  * owner_id (string, required): New owner ID
Outputs:
                  * update_result (object): Result of the update
POST /apollo/update_contact
Description: Updates an existing contact.
Inputs:
                  * contact_id (string, required): ID of the contact
                  * first_name (string, optional): Updated first name
                  * last_name (string, optional): Updated last name
                  * title (string, optional): Updated job title
                  * organization_name (string, optional): Updated employer name
                  * account_id (string, optional): Updated account ID
                  * email (string, optional): Updated email
                  * label_names (array, optional): Updated list names
                  * present_raw_address (string, optional): Updated location
                  * direct_phone (string, optional): Updated primary phone
                  * corporate_phone (string, optional): Updated work phone
                  * mobile_phone (string, optional): Updated mobile phone
                  * home_phone (string, optional): Updated home phone
                  * other_phone (string, optional): Updated other phone
Outputs:
                  * contact_data (object): Updated contact data
POST /apollo/update_contact_owners
Description: Updates owners of contacts.
Inputs:
                  * contact_ids (array, required): List of contact IDs
                  * owner_id (string, required): New owner ID
Outputs:
                  * update_result (object): Result of the update
POST /apollo/update_contact_stages
Description: Updates stages of contacts.
Inputs:
                  * contact_ids (array, required): List of contact IDs
                  * contact_stage_id (string, required): New stage ID
Outputs:
                  * update_result (object): Result of the update
POST /apollo/update_opportunity
Description: Updates an existing opportunity.
Inputs:
                  * opportunity_id (string, required): ID of the opportunity
                  * name (string, optional): Updated name
                  * stage (string, optional): Updated stage ID
                  * amount (string, optional): Updated monetary value
                  * close_date (string, optional): Updated close date (YYYY-MM-DD)
                  * owner_id (string, optional): Updated owner ID
Outputs:
                  * opportunity_data (object): Updated opportunity data
Conclusion
The Apollo Connector provides a robust solution for integrating Apollo’s B2B data into your workflows, enabling lead generation, data enrichment, and opportunity management. With its extensive action set and flexible configuration, it empowers developers to automate sales and marketing processes efficiently, leveraging Apollo’s comprehensive database to drive better business outcomes.


14. Email Connector 
The Email Connector enables seamless integration with email services, allowing users to automate sending emails, reading messages, and managing workflows. This connector supports a variety of SMTP-based email providers, making it a versatile tool for communication automation and task orchestration within your application.
Inputs Required
                  * SMTP Server: The SMTP server address for your email provider
                  * SMTP Port: The port number for SMTP communication
                  * Sender Email: Your email address for authentication and sending
                  * Sender Password: Your email account password or application-specific password
                  * Action-Specific Inputs: Vary by action (e.g., recipient emails, subject, body)
Output Format
                  * Action-Specific Outputs: Vary by action (e.g., confirmation messages, arrays of emails)
API Endpoints
POST /email/send
Description: Sends an email with the specified details.
Inputs:
                  * subject (string, required): Email subject
                  * recipient_emails (array, required): List of recipient email addresses
                  * body (string, required): Email body content
                  * cc (array, optional): List of CC email addresses
                  * bcc (array, optional): List of BCC email addresses
                  * attachments (array, optional): List of file paths for attachments
                  * reply_to_attendees (array, optional): List of reply-to email addresses
Outputs:
                  * message (string): Confirmation message
                  * sender (string): Sender’s email address
                  * body (string): Email body
                  * subject (string): Email subject
GET /email/read
Description: Reads emails from the specified mailbox.
Inputs:
                  * from_datetime (string, required): Start datetime for filtering (ISO 8601 format)
                  * to_datetime (string, required): End datetime for filtering (ISO 8601 format)
                  * mail_box_type (string, required): Mailbox type ("inbox", "sent", "drafts", "spam", "trash")
                  * limit (integer, optional): Number of emails to retrieve (default: 10, range: 1-100)
Outputs:
                  * emails (array): List of email objects
POST /email/validate
Description: Validates a receiver’s email address.
Inputs:
                  * receiver_email (string, required): Email address to validate
Outputs:
                  * message (string): Validation result message
Supported SMTP Providers
                  * Gmail:
                  * SMTP Server: smtp.gmail.com
                  * Port: 587 (TLS)
                  * Note: Requires an application-specific password if 2-Step Verification is enabled
                  * Outlook.com / Hotmail.com:
                  * SMTP Server: smtp.office365.com
                  * Port: 587 (TLS)
                  * Yahoo Mail:
                  * SMTP Server: smtp.mail.yahoo.com
                  * Port: 587 (TLS)
                  * AOL Mail:
                  * SMTP Server: smtp.aol.com
                  * Port: 587 (TLS)
                  * iCloud Mail:
                  * SMTP Server: smtp.mail.me.com
                  * Port: 587 (TLS)
                  * Zoho Mail:
                  * SMTP Server: smtp.zoho.com
                  * Port: 587 (TLS)
                  * Yandex Mail:
                  * SMTP Server: smtp.yandex.com
                  * Port: 587 (TLS)
                  * Mail.com:
                  * SMTP Server: smtp.mail.com
                  * Port: 587 (TLS)
                  * GMX Mail:
                  * SMTP Server: smtp.gmx.com
                  * Port: 587 (TLS)
                  * ProtonMail:
                  * SMTP Server: 127.0.0.1 (via ProtonMail Bridge)
                  * Port: 1025 (TLS)
                  * SendGrid:
                  * SMTP Server: smtp.sendgrid.net
                  * Port: 587 (TLS)
                  * Amazon SES:
                  * SMTP Server: Varies by region (e.g., email-smtp.us-east-1.amazonaws.com)
                  * Port: 587 (TLS)
                  * Mailgun:
                  * SMTP Server: smtp.mailgun.org
                  * Port: 587 (TLS)
                  * Postmark:
                  * SMTP Server: smtp.postmarkapp.com
                  * Port: 587 (TLS)
                  * SparkPost:
                  * SMTP Server: smtp.sparkpostmail.com
                  * Port: 587 (TLS)
Conclusion
The Email Connector offers a robust solution for automating email-related tasks, integrating seamlessly with a wide range of SMTP-based email services. With actions for sending, reading, and validating emails, it enables developers to create efficient workflows that enhance communication and productivity. Proper configuration with provider-specific SMTP settings ensures reliable performance across diverse email platforms.


15. Mailing Connector 
The Mailing Connector facilitates seamless integration with email services, enabling users to automate email-related tasks such as sending emails, retrieving messages, listing folders, and managing email operations. This connector provides a robust set of actions to streamline communication workflows within your application.
Inputs Required
                  * Mail Address: The email address used for authentication and sending
                  * Pin: The PIN or password for email service authentication
                  * Action-Specific Inputs: Vary by action (e.g., email ID, recipient details, filters)
Output Format
                  * Action-Specific Outputs: Vary by action (e.g., status messages, lists of folders or emails, email details)
API Endpoints
POST /mailing/delete_email
Description: Deletes a specified email.
Inputs:
                  * email_id (string, required): Unique identifier of the email to delete
Outputs:
                  * message (string): Status message (e.g., "Email deleted successfully")
GET /mailing/list_folders
Description: Lists all email folders in the account.
Inputs: None
Outputs:
                  * folders (array): List of folder names (e.g., ["Inbox", "Sent", "Drafts", "Trash"])
POST /mailing/list_mails
Description: Lists emails based on specified filters.
Inputs:
                  * meta_only (boolean, optional): Return only metadata (default: false)
                  * include_headers (boolean, optional): Include email headers (default: false)
                  * cursor (string, optional): Pagination cursor
                  * before (string, optional): Filter emails before a specific date (ISO 8601 format)
                  * after (string, optional): Filter emails after a specific date (ISO 8601 format)
                  * limit (integer, optional): Maximum number of emails (default: 100)
                  * any_email (string, optional): Search by any email address
                  * to (string, optional): Filter by recipient address
                  * from_ (string, optional): Filter by sender address
                  * folder (string, optional): Specify folder (e.g., "Inbox")
                  * role (string, optional): Filter by role (e.g., "sender", "receiver")
Outputs:
                  * emails (array): List of email objects
GET /mailing/retrieve_email
Description: Retrieves details of a specified email.
Inputs:
                  * email_id (string, required): Unique identifier of the email
                  * include_headers (boolean, optional): Include email headers (default: true)
Outputs:
                  * email_data (object): Detailed email information (e.g., subject, body, from, to)
POST /mailing/send_email
Description: Sends an email to specified recipients.
Inputs:
                  * from_ (object, required): Sender details
                  * display_name (string, optional): Sender’s display name
                  * identifier (string, required): Sender’s email address
                  * to (array, required): List of recipient objects
                  * display_name (string, optional): Recipient’s display name
                  * identifier (string, required): Recipient’s email address
                  * cc (array, optional): List of CC recipient objects
                  * bcc (array, optional): List of BCC recipient objects
                  * subject (string, optional): Email subject
                  * body (string, required): Email body content
                  * tracking_options (object, optional): Tracking settings
                  * opens (boolean, optional): Track email opens
                  * links (boolean, optional): Track link clicks
                  * label (string, optional): Tracking label
                  * custom_domain (string, optional): Custom tracking domain
Outputs:
                  * mail_sent_data (object): Details of the sent email (e.g., status, message ID)
Conclusion
The Mailing Connector provides a powerful and flexible solution for automating email management tasks, integrating seamlessly with email services to enhance productivity. With actions for sending, retrieving, and organizing emails, it empowers developers to build efficient communication workflows tailored to their needs. Proper configuration and adherence to best practices ensure reliable and secure email operations.


16. HubSpot Connector 
The HubSpot Connector integrates with the HubSpot CRM, enabling users to automate contact management tasks such as creating, updating, deleting, retrieving, and listing contacts. This connector leverages HubSpot’s API to streamline CRM operations, making it an essential tool for enhancing customer relationship workflows within your application.
Inputs Required
                  * Access Token: Your HubSpot API access token for authentication
                  * Refresh Token: Your HubSpot refresh token for maintaining connection
                  * Action-Specific Inputs: Vary by action (e.g., contact ID, properties, lifecycle stage)
Output Format
                  * Action-Specific Outputs: Vary by action (e.g., lists of contacts, confirmation messages, contact details)
API Endpoints
POST /hubspot/create_contact
Description: Creates a new contact in HubSpot.
Inputs:
                  * label (string, required): Contact label
                  * description (string, optional): Contact description
                  * additionalFields (object, required): Contact properties
                  * properties (object):
                  * phone (string, optional): Phone number
                  * email (string, optional): Email address
                  * lastname (string, optional): Last name
                  * archived (boolean, required): Archive status
                  * disabled (boolean, required): Disabled status
                  * lifecyclestage (string, optional): Lifecycle stage ("subscriber", "lead", "marketingqualifiedlead", "salesqualifiedlead", "opportunity", "customer", "evangelist", "other")
                  * leadstatus (string, optional): Lead status ("new", "open", "inprogress", "opendeal", "unqualified", "attemptedtocontact", "connected", "badtiming")
Outputs:
                  * created_contacts (array): List of created contacts
POST /hubspot/update_contact
Description: Updates an existing contact in HubSpot.
Inputs:
                  * id (string, required): HubSpot contact ID
                  * label (string, required): Updated contact label
                  * description (string, optional): Updated description
                  * additionalFields (object, required): Updated contact properties
                  * properties (object):
                  * phone (string, optional): Updated phone number
                  * email (string, optional): Updated email address
                  * lastname (string, optional): Updated last name
                  * archived (boolean, required): Updated archive status
                  * disabled (boolean, required): Updated disabled status
                  * lifecyclestage (string, optional): Updated lifecycle stage
                  * leadstatus (string, optional): Updated lead status
Outputs:
                  * updated_contacts (array): List of updated contacts
POST /hubspot/delete_contact
Description: Deletes a contact from HubSpot.
Inputs:
                  * contact_id (string, required): ID of the contact to delete
Outputs:
                  * message (string): Confirmation message (e.g., "Contact deleted successfully")
GET /hubspot/retrieve_contact
Description: Retrieves details of a specific contact.
Inputs:
                  * contact_id (string, required): ID of the contact to retrieve
Outputs:
                  * contact (object): Details of the retrieved contact
GET /hubspot/list_contacts
Description: Retrieves a list of contacts from HubSpot.
Inputs:
                  * limit (integer, optional): Number of contacts per page (1-100, default: 10)
                  * archived (boolean, optional): Include archived contacts (default: false)
Outputs:
                  * contacts (array): List of retrieved contacts
Conclusion
The HubSpot Connector provides a powerful solution for automating contact management within HubSpot’s CRM platform. With actions for creating, updating, deleting, retrieving, and listing contacts, it enables developers to build efficient workflows that enhance customer relationship management. Proper configuration with secure credentials and adherence to best practices ensure seamless integration and optimal performance.


17. Slack Connector 
The Slack Connector integrates with Slack’s API to enable automated communication workflows, including sending messages, scheduling huddles, and retrieving channel or user data. This connector enhances team collaboration by providing seamless access to Slack’s features, making it a valuable tool for streamlining notifications, chat management, and real-time interactions within your application.
Inputs Required
                  * User OAuth Token: The OAuth token for user-level authentication
                  * Bot User OAuth Token: The OAuth token for bot-level authentication
                  * Action-Specific Inputs: Vary by action (e.g., channel ID, message text, user IDs)
Output Format
                  * Action-Specific Outputs: Vary by action (e.g., lists of channels/users, message details, status responses)
API Endpoints
GET /slack/list_channels
Description: Retrieves a list of public and private channels in the Slack workspace.
Inputs:
                  * channel_type (string, optional): Filter by type ("public", "private", "both"; default: "both")
Outputs:
                  * channels (array): List of channel details
GET /slack/list_users
Description: Retrieves a list of all users in the Slack workspace.
Inputs:
                  * cursor (string, optional): Pagination cursor
                  * include_locale (boolean, optional): Include user locale (default: false)
                  * limit (integer, optional): Maximum number of users to return
                  * team_id (string, optional): Encoded team ID (required for org tokens)
Outputs:
                  * users (array): List of user details
GET /slack/retrieve_user_details
Description: Fetches details of a specific user by email ID.
Inputs:
                  * email_id (string, required): User’s email address
Outputs:
                  * user (object): Retrieved user information
GET /slack/read_chats
Description: Retrieves messages from a specified Slack channel or conversation.
Inputs:
                  * channel_id (string, required): Channel or conversation ID
                  * latest (string, optional): Latest timestamp (UTC, e.g., "2024-12-13T10:00:00Z")
                  * oldest (string, optional): Oldest timestamp (UTC, e.g., "2024-12-01T08:00:00Z")
                  * limit (integer, optional): Maximum messages (default: 100)
Outputs:
                  * messages (array): List of retrieved messages
GET /slack/read_messages
Description: Fetches messages from a channel or direct message.
Inputs:
                  * channel_id (string, optional): Channel ID (required if user_id not provided)
                  * user_id (string, optional): User ID for direct messages (required if channel_id not provided)
                  * latest (string, optional): Latest timestamp (UTC)
                  * oldest (string, optional): Oldest timestamp (UTC)
                  * limit (integer, optional): Maximum messages (default: 20)
Outputs:
                  * messages (array): List of retrieved messages
POST /slack/schedule_huddle
Description: Schedules a Slack huddle in a channel or direct message.
Inputs:
                  * channel_id (string, required): Channel or DM ID
                  * participants (array, optional): List of user IDs to invite
                  * reminder_time (integer, optional): Reminder minutes before huddle
                  * huddle_start_time (string, required): Start time (datetime format)
                  * immediate_message (boolean, optional): Send immediately (default: false)
Outputs:
                  * status (string): Scheduling status
                  * messages (object): Huddle scheduling details
POST /slack/send_message_as_bot
Description: Sends a message to a Slack channel or DM using a bot token.
Inputs:
                  * channel_id (string, required): Channel or DM ID
                  * text (string, required): Message content
                  * thread_ts (string, optional): Thread timestamp for replies
Outputs:
                  * messages (object): Details of the sent message
POST /slack/send_message_as_user
Description: Sends a message to a Slack channel or DM as a specified user.
Inputs:
                  * channel_id (string, required): Channel or DM ID
                  * text (string, required): Message content
                  * thread_ts (string, optional): Thread timestamp for replies
Outputs:
                  * messages (object): Details of the sent message
Conclusion
The Slack Connector offers a robust solution for automating communication workflows within Slack, enhancing team collaboration through message sending, chat retrieval, and huddle scheduling. Its comprehensive action set enables developers to integrate Slack seamlessly into their applications, fostering efficient and real-time team interactions. Proper configuration and adherence to best practices ensure reliable performance and secure operations.


18.Google Calendar Connector 
The Google Calendar Connector integrates with the Google Calendar API to automate event management tasks such as creating, updating, deleting, and retrieving events. This connector enables seamless scheduling and calendar synchronization, making it a powerful tool for enhancing productivity and workflow automation within your application.
Inputs Required
                  * Token: OAuth 2.0 access token for authentication
                  * Refresh Token: OAuth 2.0 refresh token for token renewal
                  * Expiry: Access token expiry time
                  * Action-Specific Inputs: Vary by action (e.g., event ID, start datetime, attendees)
Output Format
                  * Action-Specific Outputs: Vary by action (e.g., event details, confirmation messages, lists of events)
API Endpoints
POST /google_calendar/create
Description: Creates a new event in Google Calendar.
Inputs:
                  * summary (string, optional): Event title
                  * start_datetime (string, required): Start time (ISO 8601 format)
                  * start_timezone (string, required): Start timezone (e.g., "America/New_York")
                  * end_datetime (string, optional): End time (ISO 8601 format)
                  * end_timezone (string, optional): End timezone
                  * attendees (array, optional): List of attendee email addresses
                  * location (string, optional): Event location
                  * conference_data (string, optional): Conference details
                  * description (string, optional): Event description
Outputs:
                  * kind (string, optional): Resource type
                  * etag (string, optional): ETag for versioning
                  * id (string, optional): Event ID
                  * status (string, optional): Event status
                  * htmlLink (string, optional): HTML link to the event
                  * created (string, optional): Creation timestamp
                  * updated (string, optional): Update timestamp
                  * summary (string, optional): Event title
                  * description (string, optional): Event description
                  * location (string, optional): Event location
                  * creator_email (string, optional): Creator’s email
                  * organizer_email (string, optional): Organizer’s email
                  * start_dateTime (string, optional): Start datetime
                  * start_timeZone (string, optional): Start timezone
                  * end_dateTime (string, optional): End datetime
                  * end_timeZone (string, optional): End timezone
                  * attendees (array, optional): List of attendees
                  * iCalUID (string, optional): iCalendar UID
                  * sequence (string, optional): Sequence number
                  * eventType (string, optional): Event type
POST /google_calendar/delete
Description: Deletes an event from Google Calendar.
Inputs:
                  * event_id (string, required): ID of the event to delete
Outputs:
                  * message (string): Confirmation message (e.g., "Event deleted successfully")
GET /google_calendar/get
Description: Retrieves details of a specific event.
Inputs:
                  * event_id (string, required): ID of the event to retrieve
Outputs:
                  * kind (string): Resource type
                  * etag (string): ETag for versioning
                  * id (string): Event ID
                  * status (string): Event status
                  * htmlLink (string): HTML link to the event
                  * created (string): Creation timestamp
                  * updated (string): Update timestamp
                  * summary (string, optional): Event title
                  * description (string, optional): Event description
                  * location (string, optional): Event location
                  * creator (string, optional): Creator details
                  * organizer (string, optional): Organizer details
                  * start (string): Start datetime
                  * end (string): End datetime
                  * iCalUID (string, optional): iCalendar UID
                  * sequence (string): Sequence number
                  * eventType (string, optional): Event type
                  * colorId (string, optional): Event color ID
                  * transparency (string, optional): Transparency setting
                  * visibility (string, optional): Visibility setting
                  * attendees (array, optional): List of attendees
                  * recurringEventId (string, optional): Recurring event ID
                  * originalStartTime (string, optional): Original start time
                  * useDefaultReminder (string, optional): Default reminder setting
                  * reminderOverrides (string, optional): Reminder overrides
GET /google_calendar/get_all_events
Description: Retrieves all events within a specified time period.
Inputs:
                  * start_time (string, required): Start time (UTC format)
                  * time_zone (string, required): Timezone (e.g., "Asia/Kolkata")
                  * end_time (string, optional): End time (UTC format)
Outputs:
                  * booked_slots (array): List of event objects with fields:
                  * kind (string)
                  * etag (string)
                  * id (string)
                  * status (string)
                  * htmlLink (string)
                  * created (string)
                  * updated (string)
                  * summary (string, optional)
                  * description (string, optional)
                  * location (string, optional)
                  * creator (string, optional)
                  * organizer (string, optional)
                  * start (string)
                  * end (string)
                  * iCalUID (string, optional)
                  * sequence (string)
                  * eventType (string, optional)
                  * colorId (string, optional)
                  * transparency (string, optional)
                  * visibility (string, optional)
                  * attendees (array, optional)
                  * recurringEventId (string, optional)
                  * originalStartTime (string, optional)
                  * useDefaultReminder (string, optional)
                  * reminderOverrides (string, optional)
POST /google_calendar/update_event
Description: Updates an existing event in Google Calendar.
Inputs:
                  * event_id (string, required): ID of the event to update
                  * summary (string, optional): Updated event title
                  * start_datetime (string, required): Updated start time (ISO 8601 format)
                  * start_timezone (string, required): Updated start timezone
                  * end_datetime (string, optional): Updated end time (ISO 8601 format)
                  * end_timezone (string, optional): Updated end timezone
                  * attendees (array, optional): Updated list of attendee emails
                  * location (string, optional): Updated event location
                  * conference_data (string, optional): Updated conference details
                  * description (string, optional): Updated event description
Outputs:
                  * kind (string, optional): Resource type
                  * etag (string, optional): ETag for versioning
                  * id (string, optional): Event ID
                  * status (string, optional): Event status
                  * htmlLink (string, optional): HTML link to the event
                  * created (string, optional): Creation timestamp
                  * updated (string, optional): Update timestamp
                  * summary (string, optional): Event title
                  * description (string, optional): Event description
                  * location (string, optional): Event location
                  * creator_email (string, optional): Creator’s email
                  * organizer_email (string, optional): Organizer’s email
                  * start_dateTime (string, optional): Start datetime
                  * start_timeZone (string, optional): Start timezone
                  * end_dateTime (string, optional): End datetime
                  * end_timeZone (string, optional): End timezone
                  * attendees (array, optional): List of attendees
                  * iCalUID (string, optional): iCalendar UID
                  * sequence (string, optional): Sequence number
                  * eventType (string, optional): Event type
Conclusion
The Google Calendar Connector provides a robust solution for automating event management and scheduling tasks through integration with Google Calendar. With actions for creating, updating, deleting, and retrieving events, it empowers developers to build efficient workflows that enhance scheduling and productivity. Proper configuration with OAuth credentials and adherence to best practices ensure seamless functionality and compliance with Google’s API guidelines.
19.Google Sheet Connector
The Google Sheet Connector integrates with the Google Sheets API to automate spreadsheet management tasks, including creating, updating, deleting, and searching data. This connector enables seamless data manipulation and collaboration, making it an essential tool for streamlining workflows and enhancing productivity within your application.
Inputs Required
                  * Token: OAuth 2.0 access token for authentication
                  * Refresh Token: OAuth 2.0 refresh token for token renewal
                  * Expiry: Access token expiry time
                  * Action-Specific Inputs: Vary by action (e.g., spreadsheet ID, sheet name, row values)
Output Format
                  * Action-Specific Outputs: Vary by action (e.g., spreadsheet URLs, data arrays, row indices)
API Endpoints
POST /google_sheet/create
Description: Creates a new spreadsheet.
Inputs:
                  * title (string, required): Title of the new spreadsheet
Outputs:
                  * spread_sheet_id (string): ID of the created spreadsheet
                  * spreadsheet_url (string): URL of the created spreadsheet
POST /google_sheet/delete_cell
Description: Deletes data from a specific cell in a spreadsheet.
Inputs:
                  * spreadsheet_id (string, required): ID of the spreadsheet
                  * column_name (string, required): Column name to locate the cell
                  * sheet_name (string, required): Name of the sheet
                  * search_value (string, optional): Value to find the row
                  * row_index (integer, optional): Row index to clear
Outputs:
                  * cleared_range (string): Range of the cleared cell
                  * deleted_sheet_name (string): Name of the affected sheet
                  * spreadsheet_link (string): Spreadsheet URL
                  * spreadsheet_url (string): Spreadsheet URL
POST /google_sheet/delete_row
Description: Deletes a row from a spreadsheet.
Inputs:
                  * spreadsheet_id (string, required): ID of the spreadsheet
                  * row_index (integer, optional): Row index to delete
                  * sheet_name (string, required): Name of the sheet
                  * search_value (string, optional): Value to find the row
Outputs:
                  * spreadsheet_link (string): Spreadsheet URL
                  * spreadsheet_url (string): Spreadsheet URL
                  * row_data (array): Data of the deleted row
POST /google_sheet/delete_sheet
Description: Deletes a sheet from a spreadsheet.
Inputs:
                  * spreadsheet_id (string, required): ID of the spreadsheet
                  * sheet_name (string, required): Name of the sheet to delete
Outputs:
                  * spread_sheet_id (string): ID of the spreadsheet
                  * spreadsheet_url (string): Spreadsheet URL
GET /google_sheet/read_sheet
Description: Reads data from a specified sheet.
Inputs:
                  * spreadsheet_id (string, required): ID of the spreadsheet
                  * sheet_name (string, required): Name of the sheet
Outputs:
                  * sheet_data (array): Data from the sheet
POST /google_sheet/delete_column
Description: Deletes a column from a spreadsheet.
Inputs:
                  * spreadsheet_id (string, required): ID of the spreadsheet
                  * sheet_name (string, required): Name of the sheet
                  * column_name (string, required): Name of the column to delete
Outputs:
                  * spread_sheet_id (string): ID of the spreadsheet
                  * spreadsheet_url (string): Spreadsheet URL
POST /google_sheet/update_cell
Description: Updates data in a specific cell.
Inputs:
                  * spreadsheet_id (string, required): ID of the spreadsheet
                  * sheet_name (string, required): Name of the sheet
                  * column_name (string, required): Column name to update
                  * search_value (string, optional): Value to find the row
                  * row_index (integer, optional): Row index to update
                  * new_value (string, required): New value for the cell
Outputs:
                  * spreadsheet_link (string): Spreadsheet URL
                  * spreadsheet_url (string): Spreadsheet URL
POST /google_sheet/update_row
Description: Updates data in a specific row.
Inputs:
                  * spreadsheet_id (string, required): ID of the spreadsheet
                  * sheet_name (string, required): Name of the sheet
                  * row_index (integer, optional): Row index to update
                  * column_names (array, optional): Column names to update
                  * new_row_values (array, optional): New values for the row
                  * new_values (array, optional): Values mapped to column names
                  * search_value (string, optional): Value to find the row
Outputs:
                  * spreadsheet_link (string): Spreadsheet URL
                  * spreadsheet_url (string): Spreadsheet URL
POST /google_sheet/update_column
Description: Updates data in a specific column.
Inputs:
                  * spreadsheet_id (string, required): ID of the spreadsheet
                  * sheet_name (string, required): Name of the sheet
                  * column_name (string, required): Column name to update
                  * column_values (array, required): New values for the column
Outputs:
                  * spreadsheet_link (string): Spreadsheet URL
                  * spreadsheet_url (string): Spreadsheet URL
POST /google_sheet/insert_sheet
Description: Inserts a new sheet into a spreadsheet.
Inputs:
                  * spreadsheet_id (string, required): ID of the spreadsheet
                  * sheet_name (string, required): Name of the new sheet
Outputs:
                  * spreadsheet_link (string): Spreadsheet URL
                  * spreadsheet_url (string): Spreadsheet URL
                  * new_sheet_name (string): Name of the new sheet
POST /google_sheet/insert_row
Description: Inserts a new row into a spreadsheet.
Inputs:
                  * spreadsheet_id (string, required): ID of the spreadsheet
                  * sheet_name (string, required): Name of the sheet
                  * row_values (array, required): Values to insert into the row
Outputs:
                  * spreadsheet_link (string): Spreadsheet URL
                  * spreadsheet_url (string): Spreadsheet URL
POST /google_sheet/insert_column
Description: Inserts a new column into a spreadsheet.
Inputs:
                  * spreadsheet_id (string, required): ID of the spreadsheet
                  * sheet_name (string, required): Name of the sheet
                  * new_column_name (string, required): Name of the new column
                  * column_values (array, optional): Values to insert into the column
Outputs:
                  * spreadsheet_link (string): Spreadsheet URL
                  * spreadsheet_url (string): Spreadsheet URL
POST /google_sheet/search
Description: Searches for a record in a spreadsheet.
Inputs:
                  * spreadsheet_id (string, required): ID of the spreadsheet
                  * sheet_name (string, required): Name of the sheet
                  * search_value (string, required): Value to search for
                  * column_values (array, required): Values to insert into the column (seems misplaced, likely not applicable here)
Outputs:
                  * spreadsheet_link (string): Spreadsheet URL
                  * spreadsheet_url (string): Spreadsheet URL
                  * row_index (integer): Index of the found row
                  * row_data (array): Data of the found row
Conclusion
The Google Sheet Connector provides a comprehensive solution for automating spreadsheet management through integration with Google Sheets. With actions for creating, updating, deleting, and searching data, it enables developers to build efficient workflows that enhance data handling and collaboration. Proper configuration with OAuth credentials and adherence to best practices ensure seamless functionality and compliance with Google’s API standards.
20. Zoho Connector 
The Zoho Connector integrates with the Zoho CRM API to automate the management of leads, contacts, and other resources. This connector supports actions such as creating, updating, deleting, and retrieving CRM data, making it a powerful tool for streamlining customer relationship workflows within your application.
Inputs Required
                  * Access Token: OAuth 2.0 access token for authentication
                  * Refresh Token: OAuth 2.0 refresh token for token renewal
                  * Locations Endpoint: Zoho account region ("in", "eu", "com.au", "jp", "uk", "ca", "sa", "com")
                  * Action-Specific Inputs: Vary by action (e.g., record IDs, contact details, lead properties)
Output Format
                  * Action-Specific Outputs: Vary by action (e.g., created/updated records, lists of contacts/leads, status messages)
API Endpoints
POST /zoho/convert_leads
Description: Converts one or more leads into contacts, deals, or accounts.
Inputs:
                  * ids (array, required): List of lead IDs to convert
                  * Deals (object, required): Deal information
                  * Includes fields like name, amount, closing date
                  * carry_over_tags (array, optional): Tags to carry over
                  * related_modules (array, optional): Related modules
                  * assign_to (object, optional): User assignment
                  * move_attachments_to (object, optional): Attachment destination
Outputs:
                  * converted_lead (object): Details of the converted lead
POST /zoho/create_leads
Description: Creates one or multiple leads in Zoho CRM.
Inputs:
                  * Company (string, required): Company name
                  * Last_Name (string, required): Lead’s last name
                  * Additional optional fields: First_Name, Phone, Email, Lead_Source, etc.
Outputs:
                  * created_leads (object): Details of the created leads
POST /zoho/delete_leads
Description: Deletes multiple leads from Zoho CRM.
Inputs:
                  * record_ids (array, required): List of lead IDs to delete
Outputs:
                  * message (string): Deletion result message
POST /zoho/create_multiple_contacts
Description: Creates multiple contacts in Zoho CRM.
Inputs:
                  * Array of contact objects with:
                  * First_Name (string, optional): First name
                  * Last_Name (string, required): Last name
                  * Owner (string, optional): Owner ID
                  * Account_Name (object, optional): Account details
                  * Vendor_Name (object, optional): Vendor details
                  * Email (string, optional): Email address
                  * Description (string, optional): Description
                  * Additional fields: Mailing_Zip, Phone, Twitter, etc.
Outputs:
                  * created_contacts (object): Details of the created contacts
POST /zoho/delete_contact
Description: Deletes a specific contact from Zoho CRM.
Inputs:
                  * record_id (string, required): ID of the contact to delete
Outputs:
                  * message (string): Deletion result message
GET /zoho/list_contacts
Description: Retrieves a list of contacts from Zoho CRM.
Inputs:
                  * client_portal_permission (string, optional): Filter by portal permission
                  * fields (string, optional): Fields to include (default includes First_Name, Last_Name, Email, etc.)
                  * page (integer, optional): Page number (default: 1)
                  * per_page (integer, optional): Contacts per page (default: 100)
Outputs:
                  * contacts (array): List of retrieved contacts
GET /zoho/retrieve_contact
Description: Retrieves details of a specific contact.
Inputs:
                  * contact_id (string, required): ID of the contact to retrieve
Outputs:
                  * contact (object): Details of the retrieved contact
POST /zoho/update_contact
Description: Updates a specific contact in Zoho CRM.
Inputs:
                  * record_id (string, required): ID of the contact to update
                  * Owner (object, optional): Updated owner details
                  * Account_Name (object, optional): Updated account details
                  * Vendor_Name (object, optional): Updated vendor details
                  * Email (string, optional): Updated email
                  * Description (string, optional): Updated description
                  * Additional optional fields: First_Name, Last_Name, Phone, etc.
Outputs:
                  * updated_contact (object): Updated contact details
GET /zoho/list_leads
Description: Retrieves a list of leads from Zoho CRM.
Inputs:
                  * fields (string, optional): Fields to include (default: "Company,Last_Name,First_Name,Email,State")
                  * page (integer, optional): Page number (default: 1)
                  * per_page (integer, optional): Leads per page (default: 3)
Outputs:
                  * leads (array): List of retrieved leads
POST /zoho/update_lead
Description: Updates a specific lead in Zoho CRM.
Inputs:
                  * record_id (string, required): ID of the lead to update
                  * Owner (object, optional): Updated owner details
                  * Last_Name (string, optional): Updated last name
                  * Email (string, optional): Updated email
                  * Description (string, optional): Updated description
                  * Additional optional fields: First_Name, Phone, Lead_Status, etc.
Outputs:
                  * updated_lead (object): Updated lead details
Conclusion
The Zoho Connector provides a robust solution for automating CRM tasks within Zoho, enabling efficient management of leads and contacts. With actions for creating, updating, deleting, and retrieving data, it empowers developers to build seamless workflows that enhance customer relationship management. Proper configuration with OAuth credentials and adherence to best practices ensure reliable performance and compliance with Zoho’s API standards.


21.MongoDB Connector
Description
The MongoDB Connector integrates with MongoDB to enable automated CRUD (Create, Read, Update, Delete) operations on collections. This connector provides a streamlined interface for managing data in MongoDB, making it an essential tool for developers building data-driven applications and workflows.
Inputs Required
                  * Mongo URL: The connection URL for your MongoDB instance (e.g., mongodb://username:password@host:port/dbname)
                  * Collection Name: The name of the MongoDB collection (optional, can be specified per action)
                  * Action-Specific Inputs: Vary by action (e.g., document ID, filter key/value, record data)
Output Format
                  * Action-Specific Outputs: Vary by action (e.g., created/updated documents, status messages, retrieved records)
API Endpoints
POST /mongodb/create
Description: Creates a new document in the specified collection.
Inputs:
                  * collection_name (string, required): Name of the collection
                  * record (string, required): Document data to insert (typically JSON-formatted)
Outputs:
                  * created_document (string): The created document (JSON-formatted)
POST /mongodb/delete
Description: Deletes documents from the specified collection based on a filter or ID.
Inputs:
                  * collection_name (string, required): Name of the collection
                  * filter_key (string, optional): Key to filter documents
                  * filter_value (string, optional): Value to filter documents
                  * id (string, optional): ID of the document to delete
Outputs:
                  * status (string): Status of the delete operation (e.g., "Document deleted successfully")
GET /mongodb/find
Description: Retrieves documents from the specified collection based on a filter.
Inputs:
                  * collection_name (string, required): Name of the collection
                  * filter_key (string, optional): Key to filter documents
                  * filter_value (string, optional): Value to filter documents
Outputs:
                  * found_records (string): Found documents (JSON-formatted array)
GET /mongodb/get
Description: Retrieves a specific document by its ID.
Inputs:
                  * collection_name (string, required): Name of the collection
                  * id (string, required): ID of the document to retrieve
Outputs:
                  * record (string): Retrieved document (JSON-formatted)
POST /mongodb/update
Description: Updates an existing document in the specified collection by ID.
Inputs:
                  * collection_name (string, required): Name of the collection
                  * id (string, required): ID of the document to update
                  * record (string, required): Updated document data (JSON-formatted)
Outputs:
                  * updated_record (string): Updated document (JSON-formatted)
GET /mongodb/pull
Description: Fetches data based on the provided configuration and ingests it into Qdrant storage (Note: This action seems contextually misplaced; clarification may be needed).
Inputs: None
Outputs: None
Conclusion
The MongoDB Connector offers a robust solution for automating data management tasks in MongoDB, providing seamless integration for CRUD operations. With its flexible action set, developers can efficiently manage collections, streamline workflows, and enhance application functionality. Proper configuration with a secure MongoDB URL and adherence to best practices ensure reliable and optimized performance.


22. Content Writer Connector
The Content Writer Connector integrates with content generation and management platforms to automate tasks like content creation, editing, and publishing. This connector streamlines workflows by enabling users to generate content from input strings, making it a valuable tool for enhancing productivity in content-driven applications.
Inputs Required
                  * None (No specific configuration settings required)
                  * Action-Specific Inputs: Vary by action (e.g., input string for content generation)
Output Format
                  * Action-Specific Outputs: Vary by action (e.g., generated content string)
API Endpoints
POST /content_writer/generate_content
Description: Generates new content based on a provided input string.
Inputs:
                  * input (string, required): The input string used to generate content
Outputs:
                  * output (string): The generated content string
Conclusion
The Content Writer Connector offers a straightforward yet powerful solution for automating content-related tasks through integration with various platforms. By leveraging its content generation capabilities, developers can create efficient workflows that enhance content management and productivity. With no specific configuration needed, it provides flexibility and ease of use, allowing users to focus on crafting effective inputs to maximize the quality of generated content.


23. Ghost Connector 
The Ghost Connector integrates with the Ghost platform’s API to automate content management tasks, such as creating and deleting blog posts. This connector enables seamless interaction with your Ghost blog, making it an effective tool for streamlining content workflows and enhancing productivity within your application.
Inputs Required
                  * API URL: The base URL for your Ghost API (e.g., https://example.com/ghost/api/v3/)
                  * API Key: The API key generated from your Ghost admin panel for authentication
                  * Action-Specific Inputs: Vary by action (e.g., post title, HTML content, post ID)
Output Format
                  * Action-Specific Outputs: Vary by action (e.g., blog link, status message)
API Endpoints
POST /ghost/create
Description: Creates a new blog post on the Ghost platform.
Inputs:
                  * title (string, required): Title of the blog post
                  * html (string, required): HTML content of the blog post
Outputs:
                  * bloglink (string): URL of the created blog post
POST /ghost/delete
Description: Deletes an existing blog post from the Ghost platform.
Inputs:
                  * post_id (string, required): ID of the blog post to delete
Outputs:
                  * message (string): Status message (e.g., "Post deleted successfully")
Conclusion
The Ghost Connector offers a robust solution for automating content management tasks on the Ghost platform, enabling efficient creation and deletion of blog posts. With its straightforward actions, developers can integrate Ghost seamlessly into their workflows, enhancing content automation and productivity. Proper configuration with a secure API key and URL, combined with best practices, ensures reliable performance and effective content management.
24. GitHub Connector 
The GitHub Connector integrates with the GitHub API to automate a wide range of repository management and collaboration tasks. These include creating repositories, adding or updating files, retrieving commits, managing pull requests, tracking events, and commenting on pull requests. This connector enhances development workflows, making it a versatile tool for code management and team collaboration within your application.
Inputs Required
                  * Access Token: GitHub personal access token for authentication
                  * Username: Your GitHub username associated with the token
                  * Repo Name: Name of the target repository
                  * Action-Specific Inputs: Vary by action (e.g., repository name, file content, pull request number)
Output Format
                  * Action-Specific Outputs: Vary by action (e.g., success status, messages, lists of commits or pull requests)
API Endpoints
POST /github/create
Description: Creates a new repository on GitHub.
Inputs:
                  * name (string, required): Name of the repository
                  * description (string, optional): Repository description
                  * private (boolean, optional): Privacy setting (true for private, false for public)
Outputs:
                  * success (boolean): Indicates if the operation was successful
                  * message (string): Status message (e.g., "Repository created successfully")
POST /github/add
Description: Creates or updates a file in the specified repository.
Inputs:
                  * file_path (string, required): Path to the file in the repository
                  * file_content (string, required): Content of the file
                  * commit_message (string, required): Message for the commit
                  * branch (string, optional): Target branch (defaults to main/master if not specified)
Outputs:
                  * success (boolean): Indicates if the operation was successful
                  * message (string): Status message (e.g., "File updated successfully")
GET /github/commits
Description: Retrieves commits of a user in a specified repository.
Inputs:
                  * username (string, required): GitHub username (inherited from config)
                  * repo_name (string, required): Repository name (inherited from config)
                  * author (string, optional): Filter commits by author (defaults to username if not specified)
                  * since (string, optional): Start date (ISO 8601 format, e.g., "2024-01-01T00:00:00Z")
                  * until (string, optional): End date (ISO 8601 format)
Outputs:
                  * commits (array): List of commit objects (e.g., SHA, message, author, date)
                  * success (boolean): Indicates if the operation was successful
                  * message (string): Status message (e.g., "Commits retrieved successfully")
GET /github/pull
Description: Retrieves pull requests of a user in a repository.
Inputs:
                  * username (string, required): GitHub username (inherited from config)
                  * repo_name (string, required): Repository name (inherited from config)
                  * state (string, optional): Filter by state ("open", "closed", "all"; default: "open")
                  * user (string, optional): Filter by pull request creator (defaults to username if not specified)
Outputs:
                  * pull_requests (array): List of pull request objects (e.g., number, title, state, creator)
                  * success (boolean): Indicates if the operation was successful
                  * message (string): Status message (e.g., "Pull requests retrieved successfully")
GET /github/events
Description: Retrieves events in a specified repository.
Inputs:
                  * username (string, required): GitHub username (inherited from config)
                  * repo_name (string, required): Repository name (inherited from config)
                  * event_type (string, optional): Filter by event type (e.g., "PushEvent", "PullRequestEvent")
Outputs:
                  * events (array): List of event objects (e.g., type, actor, payload, created_at)
                  * success (boolean): Indicates if the operation was successful
                  * message (string): Status message (e.g., "Events retrieved successfully")
GET /github/fetch_pull
Description: Retrieves details of a specific pull request in a repository.
Inputs:
                  * username (string, required): GitHub username (inherited from config)
                  * repo_name (string, required): Repository name (inherited from config)
                  * pull_number (integer, required): Pull request number
Outputs:
                  * pull_request (object): Pull request details (e.g., title, body, state, creator)
                  * success (boolean): Indicates if the operation was successful
                  * message (string): Status message (e.g., "Pull request retrieved successfully")
POST /github/comment
Description: Adds a comment to a specified pull request.
Inputs:
                  * username (string, required): GitHub username (inherited from config)
                  * repo_name (string, required): Repository name (inherited from config)
                  * pull_number (integer, required): Pull request number
                  * body (string, required): Comment text
Outputs:
                  * success (boolean): Indicates if the operation was successful
                  * message (string): Status message (e.g., "Comment added successfully")
                  * comment_id (integer): ID of the created comment
Conclusion
The GitHub Connector provides a comprehensive solution for automating repository management, file operations, and collaboration tasks through seamless integration with GitHub’s API. With actions ranging from creating repositories to commenting on pull requests, it empowers developers to build robust workflows that enhance code management and team interaction. Proper configuration with a secure access token and adherence to best practices ensure reliable performance and compliance with GitHub’s API guidelines.


25. Google Drive Connector 
The Google Drive Connector integrates with the Google Drive API to automate file management tasks, including creating, deleting, reading, scraping, searching, and sharing files. This connector enhances file organization and collaboration workflows, making it a versatile tool for streamlining data handling within your application.
Inputs Required
                  * Token: OAuth 2.0 access token for authentication
                  * Refresh Token: OAuth 2.0 refresh token for token renewal
                  * Expiry: Access token expiry time
                  * Action-Specific Inputs: Vary by action (e.g., file ID, folder ID, email)
Output Format
                  * Action-Specific Outputs: Vary by action (e.g., file links, content, permission IDs)
API Endpoints
POST /google_drive/create
Description: Creates a new file in Google Drive.
Inputs:
                  * folder_id (string, optional): ID of the folder where the file will be created
                  * file_name (string, required): Name of the new file
                  * file_content (string, required): Content to write to the file
                  * file_extension (string, required): File type ("txt", "rtf", "docx", "csv", "doc", "html", "pdf", "md")
Outputs:
                  * link (string): URL of the created file
POST /google_drive/delete
Description: Deletes a file from Google Drive.
Inputs:
                  * file_name (string, optional): Name of the file to delete
                  * folder_id (string, optional): ID of the folder containing the file
                  * parent_folder_id (string, optional): ID of the parent folder
Outputs:
                  * success (string): Indicates if the operation was successful (e.g., "true")
                  * message (string): Status message (e.g., "File deleted successfully")
GET /google_drive/read
Description: Reads the content of a specific file.
Inputs:
                  * file_id (string, required): ID of the file to read
Outputs:
                  * file_content (string): Content of the file
POST /google_drive/scrape
Description: Scrapes text from PDF files in a specified folder.
Inputs:
                  * folder_link (string, required): URL or ID of the folder containing PDFs
Outputs:
                  * pdf_texts (array): List of extracted text from PDF files
GET /google_drive/search
Description: Searches for files containing a specific word.
Inputs:
                  * search_word (string, required): Word to search for in file contents
Outputs:
                  * files (array): List of file objects matching the search criteria (e.g., ID, name)
POST /google_drive/share
Description: Shares a file with a specific email address.
Inputs:
                  * file_id (string, required): ID of the file to share
                  * email (string, required): Email address to share with
                  * role (string, required): Permission role (e.g., "reader", "writer", "owner")
Outputs:
                  * permission_id (string): ID of the created permission
Conclusion
The Google Drive Connector provides a comprehensive solution for automating file management and collaboration tasks through integration with Google Drive’s API. With actions for creating, deleting, reading, scraping, searching, and sharing files, it empowers developers to build efficient workflows that enhance data management. Proper configuration with OAuth credentials and adherence to best practices ensure seamless functionality and compliance with Google’s API standards.


26. Outlook Connector 
The Outlook Connector integrates with the Microsoft Outlook API via Microsoft Graph to automate email-related tasks, currently focusing on reading emails from an Outlook inbox. This connector streamlines email management workflows, making it a valuable tool for enhancing productivity and communication within your application.
Inputs Required
                  * Sender Email: Your Outlook email address for authentication and identification
                  * Access Token: OAuth 2.0 access token for Microsoft Graph API authentication
                  * Action-Specific Inputs: Vary by action (e.g., number of emails to read)
Output Format
                  * Action-Specific Outputs: Vary by action (e.g., array of retrieved emails)
API Endpoints
GET /outlook/read_emails
Description: Retrieves a specified number of emails from the Outlook inbox.
Inputs:
                  * number_of_emails_to_read (integer, optional): Number of emails to retrieve (default: 10)
Outputs:
                  * email (array): List of email objects (e.g., subject, sender, body, receivedDateTime)
Conclusion
The Outlook Connector provides a robust solution for automating email retrieval from Microsoft Outlook through integration with the Microsoft Graph API. With its current action for reading emails, it enables developers to build efficient workflows that enhance email processing and productivity. Proper configuration with secure OAuth credentials and adherence to best practices ensure reliable performance and compliance with Microsoft’s API standards.


27. Rest API Connector 
The Rest API Connector facilitates seamless interaction with web services by enabling users to send RESTful requests and process responses. This connector supports a variety of request configurations, making it a versatile tool for automating data exchange and integrating with APIs within your application.
Inputs Required
                  * Action-Specific Inputs: Vary by action (e.g., body type, form data, cookies); no global configuration required
                  * Request Details: Defined per request (e.g., URL, method, headers via the send action)
Output Format
                  * Action-Specific Outputs: Vary by action (e.g., response object containing status, headers, and body)
API Endpoints
POST /rest_api/send
Description: Sends a RESTful request based on the provided configuration and returns the response.
Inputs:
                  * body_type (string, optional): Type of body content ("formdata", "x_www_form_urlencoded", "raw", "binary"; default: None)
                  * formdata (array, optional): List of form data items (e.g., key-value pairs for multipart/form-data)
                  * x_www_form_urlencoded (array, optional): List of URL-encoded form data items (e.g., key-value pairs)
                  * raw (string, optional): Raw data for the request body
                  * binary (string, optional): Binary data for the request body
                  * cookies (object, optional): Dictionary of cookies (key-value pairs) to include in the request
Outputs:
                  * response (object): Response object including status code, headers, and body content
Instructions
                  * Body Type: Specifies the format of the request body. Choose from:
                  * "formdata": For multipart form submissions (e.g., file uploads).
                  * "x_www_form_urlencoded": For URL-encoded form submissions.
                  * "raw": For unstructured text or JSON data.
                  * "binary": For binary file content.
                  * If unspecified, the request body is omitted unless explicitly provided.
                  * Form Data: Use when body_type is "formdata". Provide a list of key-value pairs or file references.
                  * URL-Encoded Data: Use when body_type is "x_www_form_urlencoded". Provide a list of key-value pairs.
                  * Raw Data: Use when body_type is "raw". Provide a single string (e.g., JSON, XML).
                  * Binary Data: Use when body_type is "binary". Provide binary content (e.g., file bytes).
                  * Cookies: Optional dictionary to include session or authentication cookies with the request.
Conclusion
The Rest API Connector provides a flexible and powerful solution for interacting with web services through RESTful requests. With support for various body types and customizable options, it enables developers to automate data retrieval, submission, and processing efficiently. While requiring no specific configuration, its effective use relies on well-structured requests and adherence to best practices, ensuring seamless integration with diverse APIs and optimal performance.


28. Tables Connector 
The Tables Connector is designed to simplify table management by enabling users to create tables efficiently within your application. This connector focuses on creating tables with specified columns, providing a straightforward way to set up and retrieve table metadata for further use in data workflows.
Inputs Required
                  * Columns: An array specifying the columns for the table to be created
                  * Action-Specific Inputs: Currently limited to the create action requiring column definitions
Output Format
                  * Table Created ID: Unique identifier for the created table
                  * Connector ID: Identifier for the connector instance
                  * Name: Name of the created table
API Endpoints
POST /tables/create
Description: Creates a new table with the specified columns.
Inputs:
                  * columns (array, required): Array of column names (e.g., ["name", "type"])
Outputs:
                  * table_created_id (string): Unique ID of the created table
                  * connector_id (string): ID of the connector used
                  * name (string): Name assigned to the created table
Example Usage
Sample Input
{ "columns": ["name", "type"] }
Sample Output
{ "table_created_id": "12345", "connector_id": "67890", "name": "user_data" }
Conclusion
The Tables Connector provides a simple yet effective solution for creating and managing tables within your application. With its single action for table creation, it enables developers to quickly set up data structures, retrieving essential metadata like table IDs and names for further integration. By following best practices, users can ensure efficient table management and seamless workflow automation.


29. Voice Service Connector 
The Voice Service Connector integrates with a Node.js-based voice service to enable automated outgoing voice calls with customizable messages. This connector facilitates seamless voice communication, making it an effective tool for enhancing user interaction and automating call-based workflows within your application.
Inputs Required
                  * Voice Service URL: The URL of your Node.js voice service (default: http://localhost:5050)
                  * Action-Specific Inputs: Vary by action (e.g., phone number, message for call initiation)
Output Format
                  * Action-Specific Outputs: Vary by action (e.g., call initiation result)
Requirements
                  * Process Flow: Must have a process flow named "Voice to Master Executor"
                  * Master Connector: Requires a configured master connector
                  * Action Selector: Set to "skill" for the process flow agent
API Endpoints
POST /voice_service/make_call
Description: Initiates an outgoing call to a specified phone number with an optional message.
Inputs:
                  * phone_number (string, required): Target phone number in international format (e.g., "+12025550123")
                  * message (string, optional): Message to be spoken during the call
Outputs:
                  * result (object): Result of the call initiation (e.g., success status, call ID)
Conclusion
The Voice Service Connector offers a straightforward solution for integrating voice calling capabilities into your application through a Node.js voice service. With its single action for making calls, it enables developers to automate communication tasks efficiently, enhancing user experience. Proper configuration with a valid service URL and adherence to best practices ensure reliable performance and effective voice interactions.


30. Web Scraper Connector 
The Web Scraper Connector enables automated extraction of text from web pages or entire websites, providing a seamless integration for scraping tasks. This connector supports both single-page and multi-page scraping, making it a versatile tool for data collection and analysis within your application.
Inputs Required
                  * URLs: Comma-separated list of URLs to scrape (at least one required)
                  * Scraping Type: Specifies the type of scraping ("page" or "website")
                  * Action-Specific Inputs: Vary by action (e.g., number of pages for website scraping)
Output Format
                  * Scraped Data: Extracted text or data from the specified URLs
API Endpoints
POST /web_scraper/scrape_page
Description: Scrapes text from a single web page specified in the configuration.
Inputs: None (relies on configured URLs)
Outputs:
                  * scraped_data (string or object): Text extracted from the page
POST /web_scraper/scrape_website
Description: Scrapes text from multiple pages of a website, up to a specified limit.
Inputs:
                  * number_of_pages_to_check (integer, required): Maximum number of pages to scrape
Outputs:
                  * scraped_data (string or object): Text extracted from the website pages
Configuration Example
{ "config": { "urls": "https://example.com, https://example.com/about", "scraping_type": "website" } }
Conclusion
The Web Scraper Connector provides a robust solution for automating web data extraction, supporting both single-page and website-wide scraping tasks. With its flexible configuration and action set, it empowers developers to build efficient workflows for gathering web-based insights. Proper setup with targeted URLs and adherence to best practices ensure effective, compliant, and performant scraping operations.


31. Gmail Connector 
The Gmail Connector integrates with the Gmail API to automate email-related tasks, including sending emails, reading specific messages, and pulling data for ingestion into Qdrant storage. This connector enhances email management workflows, making it a powerful tool for streamlining communication and data processing within your application.
Inputs Required
                  * Token: OAuth 2.0 access token for authentication
                  * Refresh Token: OAuth 2.0 refresh token for token renewal
                  * Expiry: Access token expiry time
                  * Action-Specific Inputs: Vary by action (e.g., recipient email, message ID)
Output Format
                  * Action-Specific Outputs: Vary by action (e.g., email IDs, email content, no output for pull)
API Endpoints
POST /gmail/send
Description: Sends an email via Gmail.
Inputs:
                  * subject (string, required): Email subject
                  * recipient_email (string, required): Recipient’s email address (must be a valid email format)
                  * body (string, required): Email body content
                  * cc (string, optional): Comma-separated list of CC email addresses
                  * bcc (string, optional): Comma-separated list of BCC email addresses
Outputs:
                  * id (string): Unique ID of the sent email
                  * threadid (string): Thread ID of the email
                  * labelid (string): Label ID applied to the email (e.g., "SENT")
GET /gmail/read
Description: Reads a specific email by its message ID.
Inputs:
                  * message_id (string, required): ID of the email to retrieve
Outputs:
                  * email (string): Content of the retrieved email (e.g., raw message or parsed text)
GET /gmail/pull
Description: Fetches data based on the provided configuration and ingests it into Qdrant storage.
Inputs: None
Outputs: None
Conclusion
The Gmail Connector provides a robust solution for automating email management and data integration tasks through seamless integration with the Gmail API. With actions for sending, reading, and pulling email data, it empowers developers to create efficient workflows that enhance communication and productivity. Proper configuration with secure OAuth credentials and adherence to best practices ensure reliable functionality and compliance with Google’s API standards.
32.AI Image Generator Connector 
The AI Image Generator Connector integrates with the Azure OpenAI service to enable automated image generation and retrieval capabilities. It supports creating high-quality images from textual prompts and reading existing image-related data, making it a versatile tool for artists, designers, and developers to enhance visual content workflows within their applications.
Inputs Required
                  * API Version: Version of the Azure OpenAI API (default: "2024-02-01")
                  * Azure Endpoint: Your Azure OpenAI service endpoint URL
                  * API Key: Authentication key for accessing the Azure OpenAI API
                  * Action-Specific Inputs: Vary by action (e.g., prompt and size for upload, image ID for read)
Output Format
                  * Action-Specific Outputs: Vary by action (e.g., image URL and revised prompt for upload, image metadata or content for read)
API Endpoints
POST /ai_image_generator/upload
Description: Uploads a textual prompt to the Azure OpenAI service to generate an image and retrieves the result.
Inputs:
                  * prompt (string, required): Textual description for generating the image
                  * size (string, optional): Image dimensions ("1024x1024", "1792x1024", "1024x1792"; default: "1024x1024")
Outputs:
                  * url (string): URL of the generated image
                  * revised_prompt (string): Revised version of the input prompt as interpreted by the API
GET /ai_image_generator/read
Description: Retrieves details or metadata about a previously generated image or related data from the Azure OpenAI service.
Inputs:
                  * image_id (string, required): Unique identifier of the image to read (e.g., from a prior upload action)
Outputs:
                  * image_data (object): Metadata or details of the image (e.g., URL, creation timestamp, original prompt)
                  * status (string): Status of the retrieval operation (e.g., "success", "not found")
Conclusion
The AI Image Generator Connector offers a comprehensive solution for automating image-related tasks through integration with the Azure OpenAI platform. With actions for uploading prompts to generate images and reading existing image data, it empowers developers to create and manage visual content efficiently. Proper configuration with secure API credentials and adherence to best practices ensure reliable performance and seamless enhancement of creative workflows.
33. Apify Connector Integration Guide
The Apify Connector integrates with the Apify platform to automate web scraping, data extraction, and workflow tasks. It enables users to run actors and pull extracted data into Qdrant storage, providing a streamlined solution for data processing within your application.
Inputs Required
                  * Apify API Token: Authentication token for accessing the Apify API
                  * Actor ID: Identifier of the Apify actor to execute
                  * Input String: Input data passed to the actor
                  * Action-Specific Inputs: Currently limited to the pull_connector action (no additional inputs required)
Output Format
                  * Action-Specific Outputs: Vary by action (e.g., no output for pull_connector)
API Endpoints
GET /apify/pull_connector
Description: Fetches data about the provided configuration and ingests it into Qdrant storage.
Inputs: None
Outputs: None
Configuration Example
apify_api_token: "your_apify_api_token" 
actor_id: "your_actor_id" 
input_str: "your_input_string"
Conclusion
The Apify Connector provides a robust solution for automating web scraping, data extraction, and workflow tasks through integration with the Apify platform. With its action for pulling data into Qdrant storage, it enables developers to efficiently process and utilize extracted data within their applications. Proper configuration with an API token, actor ID, and input string ensures seamless interaction with Apify’s capabilities, enhancing data-driven workflows.


34.Ask a Website Connector
The Ask a Website Connector provides a FastAPI-based interface for executing web scraping operations using a scraper graph system. It enables programmatic access to web scraping functionality with built-in error handling and authentication mechanisms, making it ideal for automated data extraction workflows.
Inputs Required
                  * Connector ID: Unique identifier for the scraper configuration
                  * Server Key: Authentication key for API access
                  * Input Data: JSON payload containing scraping parameters
                  * Headers: Content-Type and authentication headers
Output Format
                  * Scraping Results: Extracted data from the target website
                  * Schema Information: Available scraping configuration options
                  * Error Details: Detailed error messages if operation fails
                  * Status Codes: HTTP status codes indicating operation result
API Endpoints
POST /ask_a_website/search/{connectorID}
Description: Executes a scraping operation using the specified connector configuration.
                  * Inputs:
                  * connectorID (string): Target scraper identifier
                  * input_data (object): Scraping parameters and configuration
                  * Outputs:
                  * result (object): Scraped data
                  * status (number): HTTP status code
GET /ask_a_website/search
Description: Retrieves the schema for scraper graph configuration.
                  * Inputs:
                  * headers (object): Authentication and content-type headers
                  * Outputs:
                  * schema (object): Available scraping configuration options
                  * status (number): HTTP status code
Conclusion
The Ask a Website Connector provides a robust API interface for web scraping operations. With support for custom configurations, error handling, and authentication, it enables secure and efficient data extraction. The connector's RESTful API structure makes it suitable for integration into various application architectures.


35. Coworker Long Term Memory
Description
The Coworker Long Term Memory provides a robust system for managing and storing data across different collections. It enables efficient data organization, retrieval, and persistence through collection-based storage, making it essential for applications requiring long-term data management capabilities.
Inputs Required
                  * Collection Name: Identifier for the data storage collection
                  * Record Data: Information to be stored in the collection
                  * Query Parameters: Search criteria for data retrieval
                  * Record ID: Unique identifier for specific records
                  * Update Data: Modified information for existing records
Output Format
                  * Stored Records: Retrieved data from collections
                  * Operation Status: Success/failure indicators
                  * Query Results: Search operation results
                  * Error Messages: Detailed error information
                  * Confirmation Details: Operation completion status
API Endpoints
POST /memory/collections/{collection_name}
Description: Creates or updates records in a specified collection.
                  * Inputs:
                  * collection_name (string): Target collection identifier
                  * record_data (object): Data to be stored
                  * Outputs:
                  * record_id (string): Created/updated record identifier
                  * status (string): Operation result
GET /memory/collections/{collection_name}
Description: Retrieves records from a specified collection.
                  * Inputs:
                  * collection_name (string): Target collection identifier
                  * query_params (object): Search criteria
                  * Outputs:
                  * records (array): Retrieved data
                  * count (number): Number of records
PUT /memory/collections/{collection_name}/{record_id}
Description: Updates existing records in a collection.
                  * Inputs:
                  * collection_name (string): Target collection
                  * record_id (string): Record to update
                  * data (object): Updated information
                  * Outputs:
                  * status (string): Operation result
                  * updated_record (object): Modified record
DELETE /memory/collections/{collection_name}/{record_id}
Description: Removes records from a collection.
                  * Inputs:
                  * collection_name (string): Target collection
                  * record_id (string): Record to delete
                  * Outputs:
                  * status (string): Operation result
                  * confirmation (string): Deletion confirmation
Conclusion
The Coworker Long Term Memory provides a comprehensive solution for persistent data management. With support for various data operations and flexible collection-based storage, it enables efficient data organization and retrieval. The connector's straightforward API structure makes it an essential tool for building robust data management systems.


36. File Connector
The File Connector provides a seamless and powerful system for managing files within a designated storage container. It enables efficient file creation, retrieval, updates, and deletion through integration with a cloud storage account, making it an essential tool for applications requiring robust file management capabilities.
________________


Inputs Required
                  * Account Name: The identifier for the storage account.
                  * Account Key: The authentication key for accessing the storage account.
                  * Container Name: The identifier for the container where files are stored.
                  * File Name: The name of the file to be managed.
                  * Content: The data to be written to a file during creation or updates.
                  * Pattern: Search criteria for finding files within the container.
Output Format
                  * Success: Boolean indicator of operation success or failure.
                  * Blob URL: The URL of the created or updated file.
                  * Found Files: A list of file names matching a search pattern.
                  * Message: Additional information about the operation (e.g., deletion confirmation).
                  * Error Message: Detailed information if an operation fails.


API Endpoints
POST /file-connector/{container_name}
Description: Creates a new file in the specified container.
Inputs:
                  * container_name (string): The target container identifier.
                  * file_name (string): The name of the file to create.
                  * content (string/object): The content to write to the file.
Outputs:
                  * success (boolean): Indicates if the file was created successfully.
                  * blob_url (string): The URL of the newly created file.
                  * error_message (string): Error details if the operation fails.


GET /file-connector/{container_name}
Description: Searches for files in the specified container that match a given pattern.
Inputs:
                  * container_name (string): The target container identifier.
                  * pattern (string): The search pattern for file names.
Outputs:
                  * success (boolean): Indicates if the search was successful.
                  * found_files (array): List of file names matching the pattern.
                  * error_message (string): Error details if the operation fails.


PUT /file-connector/{container_name}/{file_name}
Description: Updates the content of an existing file in the specified container.
Inputs:
                  * container_name (string): The target container identifier.
                  * file_name (string): The name of the file to update.
                  * new_content (string/object): The updated content to write to the file.
Outputs:
                  * success (boolean): Indicates if the file was updated successfully.
                  * blob_url (string): The URL of the updated file.
                  * error_message (string): Error details if the operation fails.


DELETE /file-connector/{container_name}/{file_name}
Description: Deletes a file from the specified container.
Inputs:
                  * container_name (string): The target container identifier.
                  * file_name (string): The name of the file to delete.
Outputs:
                  * success (boolean): Indicates if the file was deleted successfully.
                  * message (string): Confirmation or additional details about the deletion.
                  * error_message (string): Error details if the operation fails.
Conclusion
The File Connector offers a comprehensive solution for managing files within a cloud storage container. With support for file creation, deletion, updates, and searches, it provides a flexible and efficient framework for file organization and retrieval. The connector's straightforward API structure and secure integration with storage accounts make it an indispensable tool for building robust file management systems.
37. MarkDown to PDF Generator
The MarkDown to PDF Generator provides a seamless and powerful system for converting Markdown content into PDF documents. It enables efficient PDF creation through integration with various PDF generation libraries, making it an essential tool for applications requiring customized document generation capabilities.
Inputs Required
                  * Markdown Content: The string containing the Markdown text to be converted into a PDF.
                  * CSS Content: An optional string containing CSS styles to customize the appearance of the PDF.
                  * Generator Name: The name of the PDF generation library to use (e.g., "weasyprint", "wkhtmltopdf", "pdflatex").
Output Format
                  * Success: Boolean indicator of operation success or failure.
                  * PDF Link: The URL of the generated PDF file.
                  * Error Message: Detailed information if an operation fails.
API Endpoints
POST /markdown-to-pdf/{generator_name}
Description: Generates a PDF file from the provided Markdown content using the specified generator.
 Inputs:
                  * generator_name (string): The name of the PDF generator to use ("weasyprint", "wkhtmltopdf", "pdflatex").
                  * markdown_content (string): The Markdown content to convert to PDF.
                  * css_content (string, optional): The CSS content to style the PDF. 
Outputs:
                  * success (boolean): Indicates if the PDF was generated successfully.
                  * pdf_link (string): The URL of the newly created PDF file.
                  * error_message (string): Error details if the operation fails.
Conclusion
The MarkDown to PDF Generator offers a comprehensive solution for creating professional PDF documents from Markdown content. With support for multiple PDF generation libraries and a straightforward API structure, it provides a flexible and efficient framework for document creation. The generator’s seamless integration and customization options make it an indispensable tool for building robust PDF generation workflows.


38. Firebase Connector
The Firebase Connector provides a seamless and powerful system for integrating with the Firebase platform, enabling efficient management of data, authentication, and backend services. It serves as an essential tool for applications requiring robust backend capabilities through a cloud-based infrastructure.
Inputs Required
                  * Link: The Firebase project link (e.g., "your_firebase_project_link").
                  * Project ID: The unique identifier for your Firebase project (e.g., "your_project_id").
                  * Collection Name: The name of the collection to interact with (e.g., "your_collection_name").
                  * Document ID: The identifier of a specific document (required for delete, update, and optional for get actions).
                  * Data: The data to be stored or updated in a document (required for create and update actions).
Output Format
                  * Success: Boolean indicator of operation success or failure.
                  * Message: Confirmation or additional details about the operation.
                  * Records: An array of retrieved documents (for get action).
                  * Error Message: Detailed information if an operation fails.
API Endpoints
POST /firebase-connector/{project_id}/{collection_name}
Description: Creates a new document in the specified collection within the Firebase project. Inputs:
                  * project_id (string): The identifier of the Firebase project.
                  * collection_name (string): The target collection identifier.
                  * data (object): The data to be stored in the new document. 
Outputs:
                  * success (boolean): Indicates if the document was created successfully.
                  * message (string): A confirmation message (e.g., "Document created successfully").
                  * error_message (string): Error details if the operation fails.
DELETE /firebase-connector/{project_id}/{collection_name}/{document_id}
Description: Deletes a document from the specified collection.
 Inputs:
                  * project_id (string): The identifier of the Firebase project.
                  * collection_name (string): The target collection identifier.
                  * document_id (string): The ID of the document to delete. 
Outputs:
                  * success (boolean): Indicates if the document was deleted successfully.
                  * message (string): Confirmation or additional details about the deletion (e.g., "Document deleted").
                  * error_message (string): Error details if the operation fails.
PUT /firebase-connector/{project_id}/{collection_name}/{document_id}
Description: Updates an existing document in the specified collection. 


Inputs:
                  * project_id (string): The identifier of the Firebase project.
                  * collection_name (string): The target collection identifier.
                  * document_id (string): The ID of the document to update.
                  * data (object): The updated data to write to the document.
 Outputs:
                  * success (boolean): Indicates if the document was updated successfully.
                  * message (string): A confirmation message (e.g., "Document updated successfully").
                  * error_message (string): Error details if the operation fails.
GET /firebase-connector/{project_id}/{collection_name}
Description: Retrieves documents from the specified collection. If a document ID is provided, retrieves a single document; otherwise, fetches all documents in the collection. 
Inputs:
                  * project_id (string): The identifier of the Firebase project.
                  * collection_name (string): The target collection identifier.
                  * document_id (string, optional): The ID of a specific document to retrieve. 
Outputs:
                  * success (boolean): Indicates if the retrieval was successful.
                  * records (array): An array of retrieved documents.
                  * error_message (string): Error details if the operation fails.
POST /firebase-connector/pull/{project_id}/{collection_name}
Description: Fetches data based on the provided configuration and ingests it into Qdrant storage. 
Inputs:
                  * project_id (string): The identifier of the Firebase project.
                  * collection_name (string): The target collection identifier. 
Outputs:
                  * success (boolean): Indicates if the pull operation was successful.
                  * message (string): Confirmation or additional details (e.g., "Data ingested into Qdrant").
                  * error_message (string): Error details if the operation fails.
Conclusion
The Firebase Connector offers a comprehensive solution for managing data and backend services through seamless integration with the Firebase platform. With support for creating, updating, deleting, and retrieving documents, as well as specialized data ingestion capabilities, it provides a flexible and efficient framework for building robust applications. The connector’s straightforward API structure and secure integration with Firebase make it an indispensable tool for developers seeking to leverage cloud-based backend functionalities.


39. Master Connector
The Master Connector provides a powerful and adaptable system for dynamically interacting with actions and skills within a specified workspace. It enables the selection and execution of actions or skills based on defined objectives, making it an essential tool for applications requiring flexible and automated workflow management.
Inputs Required
                  * Goal: A string describing the objective or task to be accomplished (e.g., "Convert Markdown to PDF" or "Send an email") – used in Action Selector and Skill Picker.
                  * Skill: A string or identifier specifying the skill to execute – used in Skill Executor.
Output Format
                  * Success: Boolean indicator of operation success or failure.
                  * Result: A dictionary containing the output of the selected or executed action/skill.
                  * Error Message: Detailed information if an operation fails (e.g., "No suitable action found").
API Endpoints
POST /master/action_selector/{workspace_id}
Description: Selects an action to be executed from a list of available actions based on the provided goal. 
Inputs:
                  * workspace_id (string): The identifier of the workspace containing registered connectors and actions.
                  * goal (string): The objective or task for which an action should be selected. 
Outputs:
                  * success (boolean): Indicates if an action was selected successfully.
                  * result (dictionary): The details of the selected action (e.g., action name and metadata).
                  * error_message (string): Error details if the operation fails (e.g., "No suitable action found for the goal").
POST /master/skill_picker/{workspace_id}
Description: Selects a skill to be executed from available connectors based on the provided goal. Inputs:
                  * workspace_id (string): The identifier of the workspace containing registered connectors and skills.
                  * goal (string): The objective or task for which a skill should be selected. 
Outputs:
                  * success (boolean): Indicates if a skill was selected successfully.
                  * result (dictionary): The details of the selected skill (e.g., skill name and metadata).
                  * error_message (string): Error details if the operation fails (e.g., "No suitable skill found for the goal").
POST /master/execute_skill/{workspace_id}
Description: Executes a specified skill within the workspace. 
Inputs:
                  * workspace_id (string): The identifier of the workspace containing registered connectors and skills.
                  * skill (string): The identifier or name of the skill to execute. 
Outputs:
                  * success (boolean): Indicates if the skill was executed successfully.
                  * result (dictionary): The output of the executed skill in a structured format.
                  * error_message (string): Error details if the operation fails (e.g., "Skill execution failed").
Conclusion
The Master Connector offers a comprehensive solution for automating workflows by dynamically selecting and executing actions and skills within a workspace. With its three core endpoints—Action Selector, Skill Picker, and Skill Executor—it provides a flexible and efficient framework for enhancing productivity and collaboration across diverse connectors. The Master Connector’s ability to adapt to varying objectives makes it an indispensable tool for building intelligent and responsive systems.


40. Notify Through Email Connector
The Notify Through Email Connector provides a seamless and efficient system for sending email notifications using a specified email configuration. It enables easy communication with recipients, making it an essential tool for applications requiring automated email workflows.
Inputs Required
                  * Recipient Email: The email address of the recipient (required).
                  * Subject: The subject line of the email.
                  * Body: The content of the email.
                  * Attachments: Optional files to include with the email.
Output Format
                  * Success: Boolean indicator of operation success or failure.
                  * Message: A confirmation message (e.g., "Email sent successfully").
                  * Error Message: Detailed information if an operation fails (e.g., "Failed to send email due to invalid recipient").
API Endpoints
POST /email-connector/send
Description: Sends an email notification to the specified recipient with the provided subject, body, and optional attachments. 
Inputs:
                  * recipient_email (string): The email address of the recipient.
                  * subject (string): The subject of the email.
                  * body (string): The body content of the email.
                  * attachments (array, optional): A list of file paths or data for attachments to include. 
Outputs:
                  * success (boolean): Indicates if the email was sent successfully.
                  * message (string): A confirmation message (e.g., "Email sent successfully").
                  * error_message (string): Error details if the operation fails.
Conclusion
The Notify Through Email Connector offers a comprehensive solution for automating email notifications through seamless integration with email services. With its straightforward send action, it provides a reliable framework for streamlining communication and improving productivity. Proper utilization of the connector ensures effective delivery of notifications and enhances workflow automation within applications.


41. Outlook Calendar Connector
The Outlook Calendar Connector provides a seamless and efficient system for integrating with Microsoft Outlook Calendar, enabling the creation and retrieval of calendar events. It serves as an essential tool for applications requiring robust event management capabilities.
Inputs Required
                  * Access Token: The Outlook access token for authentication (required).
                  * Refresh Token: The token used to obtain a new access token (required).
                  * Subject: The subject of the event (required for Create Event).
                  * Body: The body content of the event (required for Create Event).
                  * Start Time: The start time of the event in YYYY-MM-DDTHH:MM:SS format (required for Create Event, optional for Read Events).
                  * End Time: The end time of the event in YYYY-MM-DDTHH:MM:SS format (required for Create Event, optional for Read Events).
                  * Attendees: Optional list of email addresses of attendees (for Create Event).
                  * Location: Optional location of the event (for Create Event).
                  * Attendee Email: Optional email to filter events (for Read Events).
                  * Event Name: Optional name to filter events (for Read Events).
Output Format
                  * Success: Boolean indicator of operation success or failure.
                  * Event ID: The ID of the created event (for Create Event).
                  * Status: The status of the event creation (for Create Event).
                  * Read Events: An array of events matching the criteria (for Read Events).
                  * Error Message: Detailed information if an operation fails.
API Endpoints
POST /outlook-calendar-connector/create-event
Description: Creates a new calendar event in Microsoft Outlook Calendar. 
Inputs:
                  * access_token (string): The Outlook access token for authentication.
                  * refresh_token (string): The token used to refresh the access token.
                  * subject (string): The subject of the event.
                  * body (string): The body content of the event.
                  * start_time (string): The start time of the event (Format: YYYY-MM-DDTHH:MM:SS).
                  * end_time (string): The end time of the event (Format: YYYY-MM-DDTHH:MM:SS).
                  * attendees (array, optional): List of email addresses of attendees.
                  * location (string, optional): The location of the event. 
Outputs:
                  * success (boolean): Indicates if the event was created successfully.
                  * event_id (string): The ID of the created event.
                  * status (string): The status of the event creation (e.g., "Created").
                  * error_message (string): Error details if the operation fails.
GET /outlook-calendar-connector/read-events
Description: Retrieves calendar events from Microsoft Outlook Calendar based on specified criteria. 
Inputs:
                  * access_token (string): The Outlook access token for authentication.
                  * refresh_token (string): The token used to refresh the access token.
                  * start_time (string, optional): The start time to filter events (Format: YYYY-MM-DDTHH:MM:SS).
                  * end_time (string, optional): The end time to filter events (Format: YYYY-MM-DDTHH:MM:SS).
                  * attendee_email (string, optional): Filter events by attendee email.
                  * event_name (string, optional): Filter events by event name. 
Outputs:
                  * success (boolean): Indicates if the events were retrieved successfully.
                  * read_events (array): An array of events matching the criteria.
                  * error_message (string): Error details if the operation fails.
Conclusion
The Outlook Calendar Connector offers a comprehensive solution for managing calendar events through seamless integration with Microsoft Outlook Calendar. With its Create Event and Read Events endpoints, it provides a reliable framework for streamlining scheduling and enhancing productivity. Proper configuration and utilization of the connector ensure effective event management and integration within applications.
42. PDF Generator
The PDF Generator provides a seamless and efficient system for creating PDF files from HTML templates, enabling the generation of customized documents. It leverages the pdfkit library and integrates with Azure Blob storage, making it an essential tool for applications requiring dynamic PDF creation.
Inputs Required
                  * Template: The path to the HTML template file (required).
                  * Input Data: A dictionary containing variables and their values to replace placeholders in the HTML template (required).
Output Format
                  * Success: Boolean indicator of operation success or failure.
                  * PDF File Link: The URL of the generated PDF file stored in Azure Blob storage.
                  * Error Message: Detailed information if an operation fails (e.g., "Failed to upload PDF to Azure Blob storage").
API Endpoints
POST /pdf-generator/convert
Description: Generates a PDF file from the provided HTML template and input data, uploads it to Azure Blob storage, and returns the link to the created file. 
Inputs:
                  * template (string): The path to the HTML template file.
                  * input_data (dictionary): A dictionary containing variables and their values to populate the template. 
Outputs:
                  * success (boolean): Indicates if the PDF was generated and uploaded successfully.
                  * pdf_file_link (string): The URL of the generated PDF file in Azure Blob storage.
                  * error_message (string): Error details if the operation fails
Conclusion
The PDF Generator offers a comprehensive solution for creating customized PDF documents from HTML templates through seamless integration with the pdfkit library and Azure Blob storage. With its convert endpoint, it provides a reliable framework for streamlining document creation and enhancing productivity. Proper configuration and utilization of the PDF Generator ensure effective generation of professional PDFs tailored to specific needs.
43. PDF Handler Connector
The PDF Handler Connector provides a seamless and efficient system for interacting with PDF files, enabling users to extract full content, specific page content, and the total number of pages. Optimized for handling PDFs from URLs, it serves as an essential tool for applications requiring robust PDF processing capabilities.
Inputs Required
                  * PDF URL: The URL of the PDF file to process (required for all actions). Example: https://example.com/sample.pdf.
                  * Page Number: The page number (1-based index) to extract content from (required for Get Content for a Page). Example: 2.
Output Format
                  * Success: Boolean indicator of operation success or failure.
                  * Content: The text content extracted from the PDF (for Get Content and Get Content for a Page).
                  * Total Pages: The total number of pages in the PDF (for Get Total Number of Pages).
                  * Error Message: Detailed information if an operation fails (e.g., "Invalid PDF URL").
API Endpoints
GET /pdf-handler/get-content
Description: Extracts the full text content of a PDF file from the provided URL. 
Inputs:
                  * pdf_url (string): The URL of the PDF file to extract content from. 
Outputs:
                  * success (boolean): Indicates if the content was extracted successfully.
                  * content (string): The full text content extracted from the PDF file.
                  * error_message (string): Error details if the operation fails (e.g., "File is not a valid PDF").
GET /pdf-handler/get-page-content
Description: Extracts text content from a specific page of a PDF file. 
Inputs:
                  * pdf_url (string): The URL of the PDF file to extract content from.
                  * page_number (integer): The page number (1-based index) to extract content from. 
Outputs:
                  * success (boolean): Indicates if the content was extracted successfully.
                  * content (string): The text content extracted from the specified page.
                  * error_message (string): Error details if the operation fails (e.g., "Page number out of range").
GET /pdf-handler/get-total-pages
Description: Retrieves the total number of pages in a PDF file from the provided URL. 
Inputs:
                  * pdf_url (string): The URL of the PDF file to analyze. 
Outputs:
                  * success (boolean): Indicates if the page count was retrieved successfully.
                  * total_pages (integer): The total number of pages in the PDF file.
                  * error_message (string): Error details if the operation fails (e.g., "Unable to access PDF file").
Conclusion
The PDF Handler Connector offers a comprehensive solution for interacting with PDF files, providing tools to extract content and metadata efficiently. With its three endpoints—Get Content, Get Content for a Page, and Get Total Number of Pages—it delivers a flexible framework for integrating PDF handling into workflows. Proper utilization of the connector ensures streamlined processing and effective management of PDF-based tasks.


44. Pipedrive Connector
The Pipedrive Connector provides a seamless and efficient system for interacting with the Pipedrive API, enabling management of CRM resources such as contacts, leads, organizations, and users. It serves as an essential tool for applications requiring robust integration with Pipedrive’s CRM platform.
Inputs Required
                  * API Key: The Pipedrive API key for authentication (required for all actions).
                  * Additional action-specific inputs are detailed under each endpoint.
Output Format
                  * Success: Boolean indicator of operation success or failure.
                  * Contact/Leads/Organizations/Users: Dictionary or list containing resource details (varies by action).
                  * Message: Confirmation message (e.g., for delete actions).
                  * Error Message: Detailed information if an operation fails.
API Endpoints
POST /pipedrive-connector/create-contact
Description: Creates a new contact in Pipedrive. 
Inputs:
                  * api_key (string): Pipedrive API key.
                  * name (string): Contact name.
                  * org_id (int, optional): Organization ID.
                  * email_addresses (list[str]): List of email addresses.
                  * phone_numbers (list[str], optional): List of phone numbers.
                  * addresses (string, optional): Contact address.
                  * user_id (string, optional): User ID creating the contact. 
Outputs:
                  * success (boolean)
                  * contact (dict): Created contact details.
                  * error_message (string)
POST /pipedrive-connector/create-multiple-contacts
Description: Creates multiple contacts in Pipedrive. 
Inputs:
                  * api_key (string)
                  * contacts (list): List of contact dictionaries with fields: name, org_id (optional), email_addresses, phone_numbers (optional), addresses (optional), user_id (optional). 
Outputs:
                  * success (boolean)
                  * contacts (list): Created contacts details.
                  * error_message (string)
POST /pipedrive-connector/create-lead
Description: Creates a new lead in Pipedrive. 
Inputs:
                  * api_key (string)
                  * title (string): Lead name.
                  * organization_id (int, optional), label_ids (list[str], optional), person_id (int, optional), value (object, optional), expected_close_date (string, optional), visible_to (string, optional), origin_id (string, optional), was_seen (bool, optional), channel (int, optional), channel_id (string, optional). 
Outputs:
                  * success (boolean)
                  * contact (dict): Created lead details.
                  * error_message (string)
POST /pipedrive-connector/create-multiple-leads
Description: Creates multiple leads in Pipedrive. 
Inputs:
                  * api_key (string)
                  * leads (list): List of lead dictionaries with fields as in create-lead. 
Outputs:
                  * success (boolean)
                  * leads (list): Created leads details.
                  * error_message (string)
GET /pipedrive-connector/list-contacts
Description: Retrieves a list of contacts from Pipedrive. 
Inputs:
                  * api_key (string)
                  * limit (int, optional), start (int, optional), user_id (int, optional), first_char (string, optional), sort (string, optional). 
Outputs:
                  * success (boolean)
                  * contacts (list): List of retrieved contacts.
                  * error_message (string)
GET /pipedrive-connector/list-leads
Description: Retrieves a list of leads from Pipedrive. 
Inputs:
                  * api_key (string)
                  * limit (int, optional), start (int, optional), archived_status (string, optional), owner_id (int, optional), person_id (int, optional), organization_id (int, optional), sort (string, optional). 
Outputs:
                  * success (boolean)
                  * leads (list): List of retrieved leads.
                  * error_message (string)
GET /pipedrive-connector/list-organizations
Description: Retrieves a list of organizations from Pipedrive. 
Inputs:
                  * api_key (string)
                  * limit (int, optional), start (int, optional), user_id (int, optional), first_char (string, optional), sort (string, optional). 
Outputs:
                  * success (boolean)
                  * organizations (list): List of retrieved organizations.
                  * error_message (string)
GET /pipedrive-connector/list-users
Description: Retrieves a list of users from Pipedrive. 
Inputs:
                  * api_key (string) 
Outputs:
                  * success (boolean)
                  * users (list): List of retrieved users.
                  * error_message (string)
GET /pipedrive-connector/retrieve-contact/{contact_id}
Description: Retrieves details of a specific contact. 
Inputs:
                  * api_key (string)
                  * contact_id (string): Contact ID. 
Outputs:
                  * success (boolean)
                  * contact (dict): Retrieved contact details.
                  * error_message (string)
GET /pipedrive-connector/retrieve-lead/{lead_id}
Description: Retrieves details of a specific lead. 
Inputs:
                  * api_key (string)
                  * lead_id (string): Lead ID. 
Outputs:
                  * success (boolean)
                  * lead (dict): Retrieved lead details.
                  * error_message (string)
GET /pipedrive-connector/search-contact
Description: Searches for contacts based on a term. 
Inputs:
                  * api_key (string)
                  * search_term (string): Term to search (min 2 characters, URL-encoded).
                  * fields (string, optional), exact_match (bool, optional), organization_id (int, optional), limit (int, optional), cursor (string, optional).
Outputs:
                  * success (boolean)
                  * lead (dict): Retrieved contact details.
                  * error_message (string)
DELETE /pipedrive-connector/delete-contact/{contact_id}
Description: Deletes a specific contact. 
Inputs:
                  * api_key (string)
                  * contact_id (string): Contact ID. 
Outputs:
                  * success (boolean)
                  * message (string): Confirmation message (e.g., "Contact deleted").
                  * error_message (string)
DELETE /pipedrive-connector/delete-lead/{lead_id}
Description: Deletes a specific lead. 
Inputs:
                  * api_key (string)
                  * lead_id (string): Lead ID. 
Outputs:
                  * success (boolean)
                  * message (string): Confirmation message (e.g., "Lead deleted").
                  * error_message (string)
PUT /pipedrive-connector/update-contact/{contact_id}
Description: Updates a specific contact in Pipedrive. 
Inputs:
                  * api_key (string)
                  * contact_id (string): Contact ID.
                  * name (string, optional), org_id (int, optional), email_addresses (list[str], optional), phone_numbers (list[str], optional). 
Outputs:
                  * success (boolean)
                  * contact (object): Updated contact details.
                  * error_message (string)
PUT /pipedrive-connector/update-lead/{lead_id}
Description: Updates a specific lead in Pipedrive. 
Inputs:
                  * api_key (string)
                  * lead_id (string): Lead ID.
                  * title (string, optional), organization_id (int, optional), label_ids (list[str], optional), person_id (int, optional), value (object, optional), expected_close_date (string, optional), visible_to (string, optional), origin_id (string, optional), was_seen (bool, optional), channel (int, optional), channel_id (string, optional). 
Outputs:
                  * success (boolean)
                  * lead (object): Updated lead details.
                  * error_message (string)
Conclusion
The Pipedrive Connector offers a comprehensive solution for managing CRM resources through seamless integration with the Pipedrive API. With endpoints for creating, updating, retrieving, and deleting contacts, leads, organizations, and users, it provides a flexible framework for automating CRM workflows. Proper configuration and utilization of the connector ensure efficient management of Pipedrive data, enhancing productivity and operational effectiveness.


45. Prospeo Connector
The Prospeo Connector provides a seamless and efficient system for integrating with the Prospeo API, enabling access to data enrichment services such as email finding, domain searching, email verification, and social media profile enrichment. It serves as an essential tool for applications requiring accurate and up-to-date contact details and company insights.
Inputs Required
                  * API Key: The Prospeo API key for authentication (assumed as a standard requirement, though not explicitly mentioned in the input; included for consistency).
                  * Additional action-specific inputs are detailed under each endpoint.
Output Format
                  * Success: Boolean indicator of operation success or failure.
                  * Result: Varies by action (e.g., email address, list of emails, verification status, or enriched data).
                  * Error Message: Detailed information if an operation fails (e.g., "Invalid input provided").
API Endpoints
POST /prospeo-connector/find-email
Description: Finds the email address of a contact using their first name, last name, and company domain. 
Inputs:
                  * api_key (string): Prospeo API key.
                  * first_name (string): Contact’s first name.
                  * last_name (string): Contact’s last name.
                  * company (string): Company domain or name. 
Outputs:
                  * success (boolean): Indicates if the email was retrieved successfully.
                  * result (string): The retrieved email address.
                  * error_message (string): Error details if the operation fails.
GET /prospeo-connector/domain-search
Description: Finds emails associated with a particular domain. 
Inputs:
                  * api_key (string): Prospeo API key.
                  * company (string): Company domain or name.
                  * limit (int): Maximum number of emails to return. 
Outputs:
                  * success (boolean): Indicates if the search was successful.
                  * result (list): A list of email addresses associated with the domain.
                  * error_message (string): Error details if the operation fails.
POST /prospeo-connector/verify-email
Description: Verifies if an email address is valid and active. 
Inputs:
                  * api_key (string): Prospeo API key.
                  * email (string): Email address to verify. 
Outputs:
                  * success (boolean): Indicates if the verification was successful.
                  * result (dict): Verification status and additional data about the email (e.g., deliverability status).
                  * error_message (string): Error details if the operation fails.
POST /prospeo-connector/social-url-enrichment
Description: Enriches contact information using a social media profile URL (e.g., LinkedIn). Inputs:
                  * api_key (string): Prospeo API key.
                  * url (string): Social media profile URL. 
Outputs:
                  * success (boolean): Indicates if the enrichment was successful.
                  * result (dict): Enriched data (e.g., name, job title, company).
                  * error_message (string): Error details if the operation fails.
Conclusion
The Prospeo Connector offers a comprehensive solution for enriching and verifying contact data through seamless integration with the Prospeo API. With endpoints for finding emails, searching domains, verifying emails, and enriching social profiles, it provides a flexible framework for enhancing lead generation and data quality workflows. Proper utilization of the connector ensures businesses can efficiently retrieve valuable insights and maintain accurate contact information.
46. Redis Connector
The Redis Connector provides a seamless and efficient system for integrating with a Redis database, enabling users to create, retrieve, and delete key-value pairs. It serves as an essential tool for applications requiring fast and reliable data management.
Inputs Required
                  * Host: The hostname or IP address of the Redis server (required).
                  * Port: The port number on which the Redis server is running (required).
                  * Password: The password for Redis authentication (optional, if required).
                  * DB: The Redis database number to connect to (default is "0").
                  * Additional action-specific inputs are detailed under each endpoint.
Output Format
                  * Success: Boolean indicator of operation success or failure.
                  * Message: Confirmation message (e.g., for create and delete actions).
                  * Key: The key retrieved (for get action).
                  * Value: The value associated with the key (for get action).
                  * Error Message: Detailed information if an operation fails.
API Endpoints
POST /redis-connector/create
Description: Stores a key-value pair in the Redis database.
Inputs:
                  * host (string): Redis server hostname or IP.
                  * port (int): Redis server port.
                  * password (string, optional): Authentication password.
                  * db (string): Database number (default "0").
                  * key (string): The key to store.
                  * value (string): The value to associate with the key.
Outputs:
                  * success (boolean): Indicates if the key-value pair was stored successfully.
                  * message (string): Confirmation message (e.g., "Key-value pair created").
                  * error_message (string): Error details if the operation fails.
DELETE /redis-connector/delete
Description: Deletes a key-value pair from the Redis database.
Inputs:
                  * host (string): Redis server hostname or IP.
                  * port (int): Redis server port.
                  * password (string, optional): Authentication password.
                  * db (string): Database number (default "0").
                  * key (string): The key to delete.
Outputs:
                  * success (boolean): Indicates if the key-value pair was deleted successfully.
                  * message (string): Confirmation message (e.g., "Key deleted").
                  * error_message (string): Error details if the operation fails.
GET /redis-connector/get
Description: Retrieves the value associated with a specified key from the Redis database.
Inputs:
                  * host (string): Redis server hostname or IP.
                  * port (int): Redis server port.
                  * password (string, optional): Authentication password.
                  * db (string): Database number (default "0").
                  * key (string): The key to retrieve.
Outputs:
                  * success (boolean): Indicates if the value was retrieved successfully.
                  * key (string): The retrieved key.
                  * value (any): The value associated with the key.
                  * error_message (string): Error details if the operation fails.
Conclusion
The Redis Connector offers a comprehensive solution for interacting with a Redis database through seamless integration. With its create, delete, and get endpoints, it provides a reliable framework for managing key-value pairs, streamlining data operations, and enhancing application performance. Proper configuration and utilization of the Redis Connector ensure effective use of Redis capabilities for fast and efficient data handling.


47. RocketReach Connector
The RocketReach Connector provides a seamless and efficient system for integrating with the RocketReach platform, enabling users to search for professional contact information and retrieve schema details for the search action. It serves as an essential tool for applications requiring verified contact data and API schema introspection.
Inputs Required
                  * API Key: The RocketReach API key for authentication (required).
                  * Additional action-specific inputs are detailed under each endpoint.
Output Format
                  * Success: Boolean indicator of operation success or failure.
                  * Name: The name of the contact (for search action).
                  * Email: The email address of the contact (for search action).
                  * Company: The company of the contact (for search action).
                  * Description: Description of the action (for schema retrieval).
                  * Input: Input schema details (for schema retrieval).
                  * Output: Output schema details (for schema retrieval).
                  * Error Message: Detailed information if an operation fails (e.g., "Invalid query").
API Endpoints
POST /rocket_reach/search/{connectorID}
Description: Searches for professional contact information based on the provided query using the RocketReach API.
Inputs:
                  * api_key (string): RocketReach API key (retrieved from config via connectorID).
                  * connectorID (string): Unique identifier for the connector configuration.
                  * query (string): The search query string (e.g., "John Doe").
                  * page_size (int, optional): Number of results per page (default is 1).
                  * start (int, optional): Pagination start index (default is 1).
Outputs:
                  * success (boolean): Indicates if the search was successful.
                  * name (string): The name of the contact.
                  * email (string): The email address of the contact.
                  * company (string): The company of the contact.
                  * error_message (string): Error details if the operation fails (e.g., "API request failed").
GET /rocket_reach/search
Description: Retrieves the input and output schema for the RocketReach search action.
Inputs:
                  * None
Outputs:
                  * success (boolean): Indicates if the schema retrieval was successful.
                  * description (string): Description of the search action (e.g., "Search for a person on RocketReach.").
                  * input (dict): Schema for the input, including:
                  * fields: List with one field: query (string, required, labeled "Search Query").
                  * output (dict): Schema for the output, including:
                  * fields: List with fields: name (string), email (string), company (string).
                  * error_message (string): Error details if the operation fails.
Conclusion
The RocketReach Connector offers a comprehensive solution for accessing professional contact information and action metadata through seamless integration with the RocketReach platform. With its search endpoint for retrieving contact details and get schema endpoint for introspection, it provides a reliable framework for enhancing data workflows and ensuring API compatibility. Proper configuration and utilization of the RocketReach Connector enable effective discovery and management of contact data.


48. SQL Connector
The SQL Connector provides a seamless and efficient system for integrating with SQL databases, enabling users to perform queries and retrieve data. It serves as an essential tool for applications requiring robust database interaction and data ingestion capabilities.
Inputs Required
                  * Database URL: The connection string for the SQL database (e.g., postgresql://username:password@localhost/dbname, required).
                  * Additional action-specific inputs are detailed under each endpoint.
Output Format
                  * Success: Boolean indicator of operation success or failure.
                  * Found Records: An array of retrieved records (for find action).
                  * Error Message: Detailed information if an operation fails (e.g., "Invalid table name").
API Endpoints
POST /sql-connector/find
Description: Retrieves records from a specified table with optional filtering based on a column and value.
Inputs:
                  * database_url (string): The SQL database connection string.
                  * table_name (string): The name of the table to query.
                  * filter_column (string, optional): The column to filter by (default is None).
                  * filter_value (string, optional): The value to filter by (default is None).
Outputs:
                  * success (boolean): Indicates if the records were retrieved successfully.
                  * found_records (array): The array of records matching the query.
                  * error_message (string): Error details if the operation fails.
POST /sql-connector/pull
Description: Fetches data based on the provided configuration and ingests it into Qdrant storage.
Inputs:
                  * database_url (string): The SQL database connection string.
Outputs:
                  * success (boolean): Indicates if the data was fetched and ingested successfully.
                  * error_message (string): Error details if the operation fails.
Conclusion
The SQL Connector offers a comprehensive solution for querying SQL databases and managing data through seamless integration. With its find endpoint for retrieving records and pull endpoint for data ingestion into Qdrant storage, it provides a reliable framework for streamlining data workflows and enhancing productivity. Proper configuration and utilization of the SQL Connector ensure effective extraction and processing of valuable database insights.
49. Wexa API Connector
The Wexa API Connector provides a seamless and efficient system for managing state data in workflows, enabling coworkers to store, update, retrieve, delete, and replace data in a MongoDB database. It serves as an essential tool for maintaining a centralized state accessible across executions using unique identifiers.
Inputs Required
                  * Unique Identifier: A unique string identifying the state entry (required for all actions).
                  * Additional action-specific inputs are detailed under each endpoint.
Output Format
                  * Success: Boolean indicator of operation success or failure.
                  * Unique Identifier: The identifier of the state entry (for most actions).
                  * Data: The JSON data associated with the state entry (for most actions).
                  * Status: The status of the operation (for delete action).
                  * Message: A message indicating the result (for delete action).
                  * Error Message: Detailed information if an operation fails.
API Endpoints
POST /wexa-connector/create-state
Description: Creates a new state entry using the provided unique identifier and data.
Inputs:
                  * unique_identifier (string): A unique identifier for the state entry.
                  * data (object): JSON data to be stored.
Outputs:
                  * success (boolean): Indicates if the state entry was created successfully.
                  * unique_identifier (string): The identifier for the state entry.
                  * data (object): The JSON data stored in the state entry.
                  * error_message (string): Error details if the operation fails.
GET /wexa-connector/read-state
Description: Retrieves a state entry based on the unique identifier.
Inputs:
                  * unique_identifier (string): The unique identifier for the state entry to retrieve.
Outputs:
                  * success (boolean): Indicates if the state entry was retrieved successfully.
                  * unique_identifier (string): The identifier for the state entry.
                  * data (object): The JSON data stored in the state entry.
                  * error_message (string): Error details if the operation fails.
PUT /wexa-connector/update-state
Description: Merges new data with the existing data of a state entry without replacing the entire entry.
Inputs:
                  * unique_identifier (string): The unique identifier for the state entry to update.
                  * data (object): The new data to merge with the existing state entry.
Outputs:
                  * success (boolean): Indicates if the state entry was updated successfully.
                  * unique_identifier (string): The identifier for the state entry.
                  * data (object): The merged JSON data in the state entry.
                  * error_message (string): Error details if the operation fails.
DELETE /wexa-connector/delete-state
Description: Deletes a state entry identified by the unique identifier.
Inputs:
                  * unique_identifier (string): The unique identifier for the state entry to delete.
Outputs:
                  * success (boolean): Indicates if the state entry was deleted successfully.
                  * status (string): The status of the deletion operation.
                  * message (string): A message indicating the result (e.g., "State deleted").
                  * error_message (string): Error details if the operation fails.
PUT /wexa-connector/replace-state
Description: Replaces the entire content of an existing state entry with new data.
Inputs:
                  * unique_identifier (string): The unique identifier for the state entry to replace.
                  * data (object): The new data to replace the existing state entry.
Outputs:
                  * success (boolean): Indicates if the state entry was replaced successfully.
                  * unique_identifier (string): The identifier for the state entry.
                  * data (object): The new JSON data stored in the state entry.
                  * error_message (string): Error details if the operation fails.
Conclusion
The Wexa API Connector offers a comprehensive solution for managing state data in workflows through seamless integration with MongoDB. With its five endpoints—create-state, read-state, update-state, delete-state, and replace-state—it provides a flexible framework for storing, retrieving, and modifying state entries. Proper utilization of the Wexa API Connector ensures efficient state management and data sharing across workflow executions.


50. Twilio Connector
The Twilio Connector provides a seamless and efficient system for integrating with the Twilio platform, enabling programmatic management of messaging, voice calls, and conversations. It serves as an essential tool for applications requiring robust communication capabilities.
Inputs Required
                  * Account SID: Twilio Account SID (required for all actions).
                  * Auth Token: Twilio Auth Token (required for all actions).
                  * Additional action-specific inputs are detailed under each endpoint.
Output Format
                  * Success: Boolean indicator of operation success or failure.
                  * Action-specific outputs (e.g., sid, status, message, etc.) vary by endpoint.
                  * Error Message: Detailed information if an operation fails.
API Endpoints
POST /twilio-connector/cancel-scheduled-message
Description: Cancels a scheduled message using its message SID.
Inputs:
                  * account_sid (string): Twilio Account SID.
                  * auth_token (string): Twilio Auth Token.
                  * message_sid (string): SID of the scheduled message.
Outputs:
                  * success (boolean): Indicates if the cancellation was successful.
                  * sid (string): Message SID.
                  * body (string): Message body.
                  * status (string): Updated status.
                  * error_message (string): Error details if the operation fails.
POST /twilio-connector/create-conversation
Description: Creates a new conversation.
Inputs:
                  * account_sid (string): Twilio Account SID.
                  * auth_token (string): Twilio Auth Token.
                  * friendly_name (string): Display name of the conversation.
                  * unique_name (string, optional): Unique identifier.
                  * messaging_service_sid (string, optional): Messaging Service SID.
                  * attributes (string, optional): Metadata as JSON string.
                  * state (string, optional): State (active, inactive, closed).
                  * inactive_timer (string, optional): ISO8601 inactivity duration.
                  * closed_timer (string, optional): ISO8601 closure duration.
                  * bindings_email_address (string, optional): Default email address.
                  * bindings_email_name (string, optional): Default email name.
Outputs:
                  * success (boolean): Indicates if the conversation was created successfully.
                  * sid (string): Conversation SID.
                  * friendly_name (string): Conversation name.
                  * error_message (string): Error details if the operation fails.
POST /twilio-connector/create-messaging-service
Description: Creates a new messaging service.
Inputs:
                  * account_sid (string): Twilio Account SID.
                  * auth_token (string): Twilio Auth Token.
                  * friendly_name (string): Name of the messaging service.
                  * inbound_request_url (string, optional): URL for inbound requests.
                  * inbound_method (string, optional): HTTP method (default POST).
                  * fallback_url (string, optional): Fallback URL.
                  * fallback_method (string, optional): Fallback HTTP method (default POST).
                  * status_callback (string, optional): Callback URL.
                  * sticky_sender (bool, optional): Keep same sender.
                  * mms_converter (bool, optional): Convert MMS.
                  * smart_encoding (bool, optional): Enable smart encoding.
                  * scan_message_content (string, optional): Content scanning setting.
                  * fallback_to_long_code (bool, optional): Fallback to long code.
                  * area_code_geomatch (bool, optional): Match area code.
                  * validity_period (int, optional): Message validity period.
                  * synchronous_validation (bool, optional): Synchronous validation.
                  * usecase (string, optional): Service use case.
                  * use_inbound_webhook_on_number (bool, optional): Use webhook on number.
Outputs:
                  * success (boolean): Indicates if the service was created successfully.
                  * sid (string): Messaging Service SID.
                  * friendly_name (string): Service name.
                  * error_message (string): Error details if the operation fails.
DELETE /twilio-connector/delete-conversation
Description: Deletes an existing conversation.
Inputs:
                  * account_sid (string): Twilio Account SID.
                  * auth_token (string): Twilio Auth Token.
                  * conversation_sid (string): SID of the conversation to delete.
Outputs:
                  * success (boolean): Indicates if the conversation was deleted successfully.
                  * message (string): Confirmation of deletion (e.g., "Conversation deleted").
                  * error_message (string): Error details if the operation fails.
DELETE /twilio-connector/delete-message
Description: Deletes a message using its message SID.
Inputs:
                  * account_sid (string): Twilio Account SID.
                  * auth_token (string): Twilio Auth Token.
                  * message_sid (string): SID of the message to delete.
Outputs:
                  * success (boolean): Indicates if the message was deleted successfully.
                  * message (string): Confirmation of deletion (e.g., "Message deleted").
                  * error_message (string): Error details if the operation fails.
DELETE /twilio-connector/delete-messaging-service
Description: Deletes a messaging service.
Inputs:
                  * account_sid (string): Twilio Account SID.
                  * auth_token (string): Twilio Auth Token.
                  * sid (string): SID of the messaging service to delete.
Outputs:
                  * success (boolean): Indicates if the service was deleted successfully.
                  * message (string): Confirmation of deletion (e.g., "Messaging service deleted").
                  * error_message (string): Error details if the operation fails.
POST /twilio-connector/make-call
Description: Initiates a voice call using the Twilio API.
Inputs:
                  * account_sid (string): Twilio Account SID.
                  * auth_token (string): Twilio Auth Token.
                  * from_number (string): The Twilio number to call from.
                  * to_number (string): The recipient’s phone number.
                  * url (string): URL with TwiML instructions for the call.
Outputs:
                  * success (boolean): Indicates if the call was initiated successfully.
                  * status (string): Status of the call.
                  * message (string): Additional message details.
                  * error_message (string): Error details if the operation fails.
GET /twilio-connector/read-messages
Description: Retrieves messages with optional filters.
Inputs:
                  * account_sid (string): Twilio Account SID.
                  * auth_token (string): Twilio Auth Token.
                  * to (string, optional): Filter by recipient.
                  * from_ (string, optional): Filter by sender.
                  * date_sent (string, optional): Filter by date sent.
                  * date_sent_lt (string, optional): Filter by date sent (less than).
                  * date_sent_gt (string, optional): Filter by date sent (greater than).
                  * page_size (int, optional): Number of messages (default 50).
Outputs:
                  * success (boolean): Indicates if the messages were retrieved successfully.
                  * messages (dict): Dictionary of retrieved messages.
                  * error_message (string): Error details if the operation fails.
POST /twilio-connector/schedule-message
Description: Schedules a message to be sent at a future time.
Inputs:
                  * account_sid (string): Twilio Account SID.
                  * auth_token (string): Twilio Auth Token.
                  * body (string): Message content.
                  * messaging_service_sid (string): Messaging Service SID.
                  * to (string): Recipient’s phone number or channel.
                  * send_at (datetime): Scheduled send time.
                  * schedule_type (string): Schedule type (default "fixed").
Outputs:
                  * success (boolean): Indicates if the message was scheduled successfully.
                  * sid (string): Message SID.
                  * body (string): Message content.
                  * to (string): Recipient.
                  * scheduled_time (string): Scheduled send time.
                  * error_message (string): Error details if the operation fails.
POST /twilio-connector/send-rich-conversations
Description: Sends a rich conversation message.
Inputs:
                  * account_sid (string): Twilio Account SID.
                  * auth_token (string): Twilio Auth Token.
                  * to_number (string): Recipient’s phone number.
                  * message (string): Content of the message.
                  * messaging_service_sid (string): Messaging Service SID.
Outputs:
                  * success (boolean): Indicates if the message was sent successfully.
                  * status (string): Status of the message.
                  * message_id (string): Message ID.
                  * error_message (string): Error details if the operation fails.
POST /twilio-connector/send-message
Description: Sends a text or media message.
Inputs:
                  * account_sid (string): Twilio Account SID.
                  * auth_token (string): Twilio Auth Token.
                  * from_number (string): Sender’s phone number.
                  * to_number (string): Recipient’s phone number.
                  * message (string): Message content.
                  * media_urls (list[string], optional): List of media URLs.
                  * type (string): Message type (text or media).
Outputs:
                  * success (boolean): Indicates if the message was sent successfully.
                  * status (string): Status of the message.
                  * message_id (string): Message ID.
                  * error_message (string): Error details if the operation fails.
PUT /twilio-connector/update-conversation
Description: Updates a conversation’s details.
Inputs:
                  * account_sid (string): Twilio Account SID.
                  * auth_token (string): Twilio Auth Token.
                  * conversation_sid (string): SID of the conversation.
                  * friendly_name (string, optional): New friendly name.
                  * attributes (string, optional): New attributes (JSON string).
                  * state (string, optional): New state (active, inactive, closed).
                  * unique_name (string, optional): New unique name.
Outputs:
                  * success (boolean): Indicates if the conversation was updated successfully.
                  * sid (string): Conversation SID.
                  * friendly_name (string): Updated name.
                  * date_created (string): Creation date.
                  * date_updated (string): Update date.
                  * attributes (string): Updated attributes.
                  * state (string): Updated state.
                  * error_message (string): Error details if the operation fails.
PUT /twilio-connector/update-message
Description: Updates a message’s details.
Inputs:
                  * account_sid (string): Twilio Account SID.
                  * auth_token (string): Twilio Auth Token.
                  * message_sid (string): SID of the message.
                  * body (string, optional): New message content.
                  * status (string, optional): New status (e.g., "canceled").
Outputs:
                  * success (boolean): Indicates if the message was updated successfully.
                  * message_data (dict): Updated message details.
                  * status (string): Updated status.
                  * error_message (string): Error details if the operation fails.
PUT /twilio-connector/update-messaging-service
Description: Updates the details of a messaging service.
Inputs:
                  * account_sid (string): Twilio Account SID.
                  * auth_token (string): Twilio Auth Token.
                  * sid (string): SID of the messaging service.
                  * friendly_name (string, optional): New friendly name.
                  * inbound_request_url (string, optional): New inbound request URL.
                  * inbound_method (string, optional): New HTTP method (default POST).
                  * fallback_url (string, optional): New fallback URL.
                  * fallback_method (string, optional): New fallback HTTP method (default POST).
                  * status_callback (string, optional): New status callback URL.
                  * sticky_sender (bool, optional): Update sticky sender.
                  * mms_converter (bool, optional): Update MMS converter.
                  * smart_encoding (bool, optional): Update smart encoding.
                  * scan_message_content (string, optional): Update content scanning.
                  * fallback_to_long_code (bool, optional): Update fallback to long code.
                  * area_code_geomatch (bool, optional): Update area code geomatch.
                  * validity_period (int, optional): Update validity period.
                  * synchronous_validation (bool, optional): Update synchronous validation.
                  * usecase (string, optional): Update use case.
                  * use_inbound_webhook_on_number (bool, optional): Update webhook usage.
Outputs:
                  * success (boolean): Indicates if the service was updated successfully.
                  * sid (string): Messaging Service SID.
                  * friendly_name (string): Updated name.
                  * error_message (string): Error details if the operation fails.
Conclusion
The Twilio Connector offers a comprehensive solution for managing messaging, voice, and conversation services through seamless integration with the Twilio platform. With its 14 endpoints, it provides a flexible framework for automating communication workflows, enhancing application functionality, and improving user engagement. Proper configuration and utilization of the Twilio Connector ensure effective use of Twilio’s capabilities for diverse communication needs.


51. Twitter Connector
The Twitter Connector provides a seamless and efficient system for integrating with the Twitter platform, enabling users to programmatically create and delete tweets. It serves as an essential tool for applications requiring automated social media interactions.
Inputs Required
                  * Access Token: Twitter Access Token for authentication (required).
                  * Access Token Secret: Twitter Access Token Secret for authentication (required).
                  * Consumer Key: Twitter Consumer Key for authentication (required).
                  * Consumer Secret: Twitter Consumer Secret for authentication (required).
                  * Additional action-specific inputs are detailed under each endpoint.
Output Format
                  * Success: Boolean indicator of operation success or failure.
                  * Tweet ID: The ID of the tweet (for create and delete actions).
                  * Tweet Text: The text of the tweet (for create action).
                  * Tweet URL: The URL of the tweet (for create action).
                  * Status: The status of the operation (for delete action).
                  * Error Message: Detailed information if an operation fails.
API Endpoints
POST /twitter-connector/create
Description: Creates a new tweet on your Twitter account.
Inputs:
                  * access_token (string): Twitter Access Token.
                  * access_token_secret (string): Twitter Access Token Secret.
                  * consumer_key (string): Twitter Consumer Key.
                  * consumer_secret (string): Twitter Consumer Secret.
                  * text (string): The content of the tweet.
Outputs:
                  * success (boolean): Indicates if the tweet was created successfully.
                  * tweet_id (string): The ID of the created tweet.
                  * tweet_text (string): The text of the created tweet.
                  * tweet_url (string): The URL of the created tweet.
                  * error_message (string): Error details if the operation fails.
DELETE /twitter-connector/delete
Description: Deletes a tweet from your Twitter account.
Inputs:
                  * access_token (string): Twitter Access Token.
                  * access_token_secret (string): Twitter Access Token Secret.
                  * consumer_key (string): Twitter Consumer Key.
                  * consumer_secret (string): Twitter Consumer Secret.
                  * tweet_id (string): The ID of the tweet to delete.
Outputs:
                  * success (boolean): Indicates if the tweet was deleted successfully.
                  * status (string): The status of the delete operation (e.g., "Deleted").
                  * tweet_id (string): The ID of the deleted tweet.
                  * error_message (string): Error details if the operation fails.
Conclusion
The Twitter Connector offers a comprehensive solution for programmatically managing tweets through seamless integration with the Twitter platform. With its create and delete endpoints, it provides a reliable framework for automating social media tasks and enhancing application functionality. Proper configuration and utilization of the Twitter Connector ensure effective interaction with Twitter’s API for streamlined communication workflows.


52. Wexa API Connector
The Wexa API Connector provides a seamless and efficient system for retrieving insights into workflow executions by fetching information about the users who initiated them. It serves as an essential tool for monitoring and auditing workflow-related details within applications.
Inputs Required
                  * Executed By: The unique identifier of the executor (user) who initiated the workflow (required).
Output Format
                  * Success: Boolean indicator of operation success or failure.
                  * User ID: The ID of the user who executed the workflow.
                  * Username: The username of the user.
                  * Email: The email address of the user (optional).
                  * Role: The role assigned to the user (optional).
                  * Created At: The timestamp when the user was created (optional).
                  * Error Message: Detailed information if an operation fails.
API Endpoints
GET /wexa-connector/get-executor-user-info
Description: Retrieves detailed information about the user who executed a specific workflow, identified by their executed_by ID.
Inputs:
                  * executed_by (string): The unique identifier of the executor who initiated the workflow.
Outputs:
                  * success (boolean): Indicates if the user information was retrieved successfully.
                  * user_id (string): The ID of the user who executed the workflow.
                  * username (string): The username of the user.
                  * email (string, optional): The email address of the user.
                  * role (string, optional): The role assigned to the user within the system.
                  * created_at (string, optional): The timestamp when the user was created (e.g., "2023-10-24T12:34:56Z").
                  * error_message (string): Error details if the operation fails.
Conclusion
The Wexa API Connector offers a comprehensive solution for tracking and auditing workflow executions by providing visibility into the users who initiate them. With its get-executor-user-info endpoint, it delivers a reliable framework for monitoring user activity, enhancing accountability, and gaining insights into workflow processes. Proper utilization of the Wexa API Connector ensures efficient management of execution-related data.


53. Bland AI Connector
The Bland AI Connector provides a seamless and efficient system for integrating with Bland AI services, enabling automation of call management, batch processing, and web agent operations. It serves as an essential tool for applications requiring advanced communication and data analysis capabilities.
Inputs Required
                  * API Key: Bland AI API key for authentication (required for all actions).
                  * Base URL: The Bland AI API URL (e.g., https://api.bland.ai/v1, required for all actions).
                  * Additional action-specific inputs are detailed under each endpoint.
Output Format
                  * Success: Boolean indicator of operation success or failure.
                  * Action-specific outputs (e.g., status, analysis_result, call_id, etc.) vary by endpoint.
                  * Error Message: Detailed information if an operation fails.
API Endpoints
POST /bland-ai-connector/analyze-batch-calls
Description: Analyzes a batch of calls to provide insights.
Inputs:
                  * api_key (string): Bland AI API key.
                  * base_url (string): Bland AI API URL.
                  * batch_id (string): Unique identifier of the batch.
                  * goal (string): The goal of analysis.
                  * questions (list): List of question arrays for batch analysis.
Outputs:
                  * success (boolean): Indicates if the analysis was successful.
                  * analysis_result (object): Result of batch call analysis.
                  * status (string): Status of the analysis.
                  * error_message (string): Error details if the operation fails.
POST /bland-ai-connector/analyze-call
Description: Analyzes a specific call for detailed insights.
Inputs:
                  * api_key (string): Bland AI API key.
                  * base_url (string): Bland AI API URL.
                  * call_id (string): Unique identifier of the call.
                  * goal (string): The goal of analysis.
                  * questions (list): List of question arrays for analysis.
Outputs:
                  * success (boolean): Indicates if the analysis was successful.
                  * status (string): Status of the call analysis.
                  * analysis (object): Analysis details of the call.
                  * error_message (string): Error details if the operation fails.
POST /bland-ai-connector/authorize-web-agent-call
Description: Authorizes a web agent to perform actions.
Inputs:
                  * api_key (string): Bland AI API key.
                  * base_url (string): Bland AI API URL.
                  * agent_id (string): Unique identifier of the web agent.
Outputs:
                  * success (boolean): Indicates if the authorization was successful.
                  * status (string): Authorization status.
                  * authorized_at (string): Timestamp of authorization.
                  * error_message (string): Error details if the operation fails.
GET /bland-ai-connector/call-details
Description: Retrieves detailed information about a specific call.
Inputs:
                  * api_key (string): Bland AI API key.
                  * base_url (string): Bland AI API URL.
                  * call_id (string): Unique identifier of the call.
                  * encryption_key (string): Encryption key for securing call data.
Outputs:
                  * success (boolean): Indicates if the details were retrieved successfully.
                  * call_id (string): Call identifier.
                  * status (string): Call status.
                  * duration (string): Call duration.
                  * start_time (string): Call start time.
                  * end_time (string): Call end time.
                  * from_number (string): Originating phone number.
                  * to_number (string): Destination phone number.
                  * error_message (string): Error details if the operation fails.
POST /bland-ai-connector/create-campaign
Description: Creates a new campaign for batch calls.
Inputs:
                  * api_key (string): Bland AI API key.
                  * base_url (string): Bland AI API URL.
                  * name (string): Name of the campaign.
                  * numbers (list): List of phone numbers.
                  * sequence (object): Sequence of actions for the campaign.
Outputs:
                  * success (boolean): Indicates if the campaign was created successfully.
                  * campaign_id (string): Unique identifier of the created campaign.
                  * status (string): Campaign creation status.
                  * error_message (string): Error details if the operation fails.
POST /bland-ai-connector/create-custom-tool
Description: Creates a custom tool for use in campaigns.
Inputs:
                  * api_key (string): Bland AI API key.
                  * base_url (string): Bland AI API URL.
                  * name (string): Name of the tool.
                  * description (string): Description of the tool.
                  * url (string): URL endpoint for the tool.
                  * speech (string, optional): Speech content for the tool.
                  * method (string, optional): HTTP method (GET/POST).
                  * headers (object, optional): HTTP headers for the tool.
                  * body (object, optional): Request body.
                  * query (object, optional): Query parameters.
                  * input_schema (object, optional): Input validation schema.
                  * response (object, optional): Expected response schema.
                  * timeout (int, optional): Timeout duration in seconds.
Outputs:
                  * success (boolean): Indicates if the tool was created successfully.
                  * tool_id (string): Unique identifier of the created tool.
                  * status (string): Creation status.
                  * error_message (string): Error details if the operation fails.
POST /bland-ai-connector/create-encrypted-key
Description: Creates an encrypted key for secure communication.
Inputs:
                  * api_key (string): Bland AI API key.
                  * base_url (string): Bland AI API URL.
                  * account_sid (string): Account SID for authentication.
                  * auth_token (string): Authentication token.
Outputs:
                  * success (boolean): Indicates if the key was created successfully.
                  * encrypted_key (string): Generated encrypted key.
                  * status (string): Key generation status.
                  * error_message (string): Error details if the operation fails.
POST /bland-ai-connector/create-web-agent
Description: Creates a new web agent.
Inputs:
                  * api_key (string): Bland AI API key.
                  * base_url (string): Bland AI API URL.
                  * prompt (string): Initial prompt for the web agent.
                  * voice (string, optional): Voice settings.
                  * analysis_schema (object, optional): Schema for analysis.
                  * metadata (object, optional): Metadata for the agent.
                  * pathway_id (string, optional): Pathway ID for agent actions.
                  * language (string, optional): Language settings.
                  * model (string, optional): LLM model to use.
                  * first_sentence (string, optional): Starting sentence.
                  * tools (list, optional): List of tools for the agent.
                  * dynamic_data (object, optional): Dynamic data.
                  * interruption_threshold (int, optional): Threshold for interruptions.
                  * keywords (list, optional): Keywords for the agent.
                  * max_duration (int, optional): Maximum duration settings.
Outputs:
                  * success (boolean): Indicates if the agent was created successfully.
                  * agent_id (string): Unique identifier of the created agent.
                  * status (string): Creation status.
                  * error_message (string): Error details if the operation fails.
DELETE /bland-ai-connector/delete-agent
Description: Deletes an existing web agent.
Inputs:
                  * api_key (string): Bland AI API key.
                  * base_url (string): Bland AI API URL.
                  * agent_id (string): Unique identifier of the agent to delete.
Outputs:
                  * success (boolean): Indicates if the agent was deleted successfully.
                  * status (string): Deletion status.
                  * message (string): Confirmation message (e.g., "Agent deleted").
                  * error_message (string): Error details if the operation fails.
DELETE /bland-ai-connector/delete-custom-tool
Description: Deletes a custom tool.
Inputs:
                  * api_key (string): Bland AI API key.
                  * base_url (string): Bland AI API URL.
                  * tool_id (string): Unique identifier of the tool to delete.
Outputs:
                  * success (boolean): Indicates if the tool was deleted successfully.
                  * tool_id (string): Deleted tool identifier.
                  * status (string): Deletion status.
                  * error_message (string): Error details if the operation fails.
DELETE /bland-ai-connector/delete-encryption-key
Description: Deletes an existing encryption key.
Inputs:
                  * api_key (string): Bland AI API key.
                  * base_url (string): Bland AI API URL.
                  * encrypted_key (string): Unique identifier of the encryption key.
Outputs:
                  * success (boolean): Indicates if the key was deleted successfully.
                  * status (string): Deletion status.
                  * message (string): Confirmation message (e.g., "Key deleted").
                  * error_message (string): Error details if the operation fails.
GET /bland-ai-connector/fetch-audio-recording
Description: Retrieves the audio recording of a specific call.
Inputs:
                  * api_key (string): Bland AI API key.
                  * base_url (string): Bland AI API URL.
                  * call_id (string): Unique identifier of the call.
                  * accept_string (string, optional): Accept string for audio format.
Outputs:
                  * success (boolean): Indicates if the recording was retrieved successfully.
                  * recording_data (object): Retrieved audio recording data.
                  * error_message (string): Error details if the operation fails.
GET /bland-ai-connector/fetch-corrected-transcripts
Description: Retrieves corrected transcripts for a specific call.
Inputs:
                  * api_key (string): Bland AI API key.
                  * base_url (string): Bland AI API URL.
                  * call_id (string): Unique identifier of the call.
Outputs:
                  * success (boolean): Indicates if the transcripts were retrieved successfully.
                  * corrected_transcript (string): Corrected transcript of the call.
                  * error_message (string): Error details if the operation fails.
GET /bland-ai-connector/list-batch-calls
Description: Lists all batch calls.
Inputs:
                  * api_key (string): Bland AI API key.
                  * base_url (string): Bland AI API URL.
Outputs:
                  * success (boolean): Indicates if the list was retrieved successfully.
                  * batches (list): List of batch calls.
                  * error_message (string): Error details if the operation fails.
GET /bland-ai-connector/list-calls
Description: Lists all calls with optional filters.
Inputs:
                  * api_key (string): Bland AI API key.
                  * base_url (string): Bland AI API URL.
                  * from_number (string, optional): Filter by originating number.
                  * to_number (string, optional): Filter by destination number.
                  * start_date (string, optional): Filter by start date (YYYY-MM-DD).
                  * end_date (string, optional): Filter by end date (YYYY-MM-DD).
                  * limit (int, optional): Limit the number of results.
                  * ascending (bool, optional): Order by ascending.
                  * batch_id (string, optional): Filter by batch ID.
                  * campaign_id (string, optional): Filter by campaign ID.
Outputs:
                  * success (boolean): Indicates if the list was retrieved successfully.
                  * total_count (int): Total number of calls.
                  * calls (list): List of calls matching the filters.
                  * error_message (string): Error details if the operation fails.
GET /bland-ai-connector/list-campaigns
Description: Lists all campaigns.
Inputs:
                  * api_key (string): Bland AI API key.
                  * base_url (string): Bland AI API URL.
Outputs:
                  * success (boolean): Indicates if the list was retrieved successfully.
                  * campaigns (list): List of campaigns.
                  * error_message (string): Error details if the operation fails.
POST /bland-ai-connector/send-batch-calls
Description: Sends batch calls with provided parameters.
Inputs:
                  * api_key (string): Bland AI API key.
                  * base_url (string): Bland AI API URL.
                  * base_prompt (string): The base prompt for the calls.
                  * call_data (list): List of batch call data.
                  * from_ (string, optional): Sender’s phone number.
                  * label (string, optional): Label for the batch.
                  * campaign_id (string, optional): Associated campaign ID.
                  * test_mode (bool, optional): Test mode flag.
Outputs:
                  * success (boolean): Indicates if the batch was sent successfully.
                  * status (string): Send status.
                  * message (string): Confirmation message (e.g., "Batch sent").
                  * batch_id (string): Identifier of the sent batch.
                  * error_message (string): Error details if the operation fails.
POST /bland-ai-connector/send-call-advanced
Description: Sends a call with advanced options.
Inputs:
                  * api_key (string): Bland AI API key.
                  * base_url (string): Bland AI API URL.
                  * phone_number (string): Recipient’s phone number.
                  * task (string): Task to perform.
                  * pathway_id (string, optional): Pathway ID.
                  * start_node_id (string, optional): Start node.
                  * voice (string, optional): Voice settings.
                  * first_sentence (string, optional): First sentence.
                  * wait_for_greeting (bool): Wait for a greeting.
                  * block_interruptions (bool): Block interruptions.
                  * interruption_threshold (int, optional): Interruption threshold.
                  * model (string, optional): AI model.
                  * temperature (float, optional): Model temperature.
                  * keywords (list, optional): List of keywords.
                  * pronunciation_guide (object, optional): Pronunciation guide.
                  * transfer_phone_number (string, optional): Phone number for transfer.
                  * transfer_list (list, optional): Transfer list.
                  * language (string, optional): Language settings.
                  * timezone (string, optional): Timezone settings.
                  * request_data (object, optional): Request data.
                  * tools (list, optional): List of tools.
                  * dynamic_data (object, optional): Dynamic data.
                  * start_time (string, optional): Start time for the call.
                  * voicemail_message (string, optional): Voicemail message.
                  * voicemail_action (string, optional): Voicemail action settings.
                  * retry (object, optional): Retry settings.
                  * max_duration (int, optional): Max duration of the call.
                  * record (bool): Record the call.
                  * from_ (string): Sender’s number.
                  * webhook (string, optional): Webhook for events.
                  * webhook_events (list, optional): List of webhook events.
                  * metadata (object, optional): Additional metadata.
                  * summary_prompt (string, optional): Summary prompt.
                  * analysis_prompt (string, optional): Analysis prompt.
                  * analysis_schema (object, optional): Analysis schema.
                  * answered_by_enabled (bool): Enable call answer detection.
                  * encryption_key (string, optional): Encryption key.
Outputs:
                  * success (boolean): Indicates if the call was sent successfully.
                  * status (string): Call status (e.g., "sent").
                  * message (string): Confirmation message (e.g., "Call sent successfully").
                  * error_message (string): Error details if the operation fails.
Conclusion
The Bland AI Connector offers a comprehensive solution for automating call management, batch processing, and web agent operations through seamless integration with Bland AI services. With its 18 endpoints, it provides a flexible framework for enhancing communication workflows, analyzing call data, and managing campaigns. Proper configuration and utilization of the Bland AI Connector ensure effective automation and insights for diverse application needs.
54.Wikipedia API Connector
The Wikipedia API Connector provides a seamless and efficient system for retrieving content from specified Wikipedia pages. It serves as an essential tool for programmatically accessing valuable information from the Wikipedia platform within applications.
Inputs Required
                  * Pages: A comma-separated string of Wikipedia page titles to retrieve content from (required).
Output Format
                  * Success: Boolean indicator of operation success or failure.
                  * Page Titles: The titles of the requested Wikipedia pages.
                  * Content: The extracted content from the specified pages.
                  * Last Edited: The timestamp of the last edit to each page (optional).
                  * Page ID: The unique identifier of each Wikipedia page (optional).
                  * Error Message: Detailed information if an operation fails.
API Endpoints
GET /wikipedia-connector/pull-content
Description
Retrieves content from the specified Wikipedia pages identified by their page titles.
Inputs
                  * pages (string): A comma-separated string of Wikipedia page titles (e.g., "Python, Artificial Intelligence, Machine Learning").
Outputs
                  * success (boolean): Indicates if the content was retrieved successfully.
                  * page_titles (array of strings): The titles of the requested Wikipedia pages.
                  * content (array of strings): The extracted content from each specified page.
                  * last_edited (array of strings, optional): The timestamp of the last edit for each page (e.g., "2025-02-20T14:22:33Z").
                  * page_id (array of strings, optional): The unique identifier for each Wikipedia page.
                  * error_message (string): Error details if the operation fails.
Example Configuration
wikipedia: pages: "Python, Artificial Intelligence, Machine Learning"
Example Response
{ "success": true, "page_titles": ["Python", "Artificial Intelligence", "Machine Learning"], "content": [ "Python is a high-level, interpreted programming language...", "Artificial Intelligence (AI) refers to the simulation of human intelligence...", "Machine Learning (ML) is a subset of artificial intelligence..." ], "last_edited": [ "2025-02-20T14:22:33Z", "2025-02-18T09:15:47Z", "2025-02-19T11:30:12Z" ], "page_id": ["Python_123", "AI_456", "ML_789"], "error_message": null }
Conclusion
The Wikipedia API Connector offers a comprehensive solution for accessing and retrieving content from Wikipedia pages through seamless integration with the Wikipedia platform. With its pull-content endpoint, it delivers a reliable framework for automating content retrieval tasks, enhancing information processing, and improving productivity. Proper utilization of the Wikipedia API Connector ensures efficient management of Wikipedia data, enabling developers to harness the platform’s vast knowledge base effectively.

55.WordPress API Connector
The WordPress API Connector provides a seamless and efficient system for programmatically creating and deleting posts on a WordPress site. It serves as an essential tool for automating content management workflows within applications.
Inputs Required
                  * Base URL: The base URL of your WordPress site (required).
                  * Username: Your WordPress username (required).
                  * Password: Your WordPress application password (required).
Output Format
                  * Success: Boolean indicator of operation success or failure.
                  * Post ID: The unique identifier of the created or deleted post.
                  * Post Title: The title of the created post (for create action).
                  * Deleted: The status of the delete operation (for delete action).
                  * Error Message: Detailed information if an operation fails.
API Endpoints
POST /wordpress-connector/create-post
Description
Creates a new post on your WordPress site.
Inputs
                  * title (string): The title of the post (required).
                  * content (string): The content of the post (required).
                  * tags (string, optional): A comma-separated string of tags associated with the post.
Outputs
                  * success (boolean): Indicates if the post was created successfully.
                  * post_id (string): The ID of the created post.
                  * post_title (string): The title of the created post.
                  * error_message (string): Error details if the operation fails.
Example Request
{ "title": "My First Post", "content": "This is the content of my first WordPress post.", "tags": "blog, tutorial" }
Example Response
{ "success": true, "post_id": "123", "post_title": "My First Post", "error_message": null }
DELETE /wordpress-connector/delete-post
Description
Deletes a post from your WordPress site.
Inputs
                  * post_id (string): The ID of the post to be deleted (required).
Outputs
                  * success (boolean): Indicates if the post was deleted successfully.
                  * post_id (string): The ID of the deleted post.
                  * deleted (string): The status of the delete operation (e.g., "success").
                  * error_message (string): Error details if the operation fails.
Example Request
{ "post_id": "123" }
Example Response
{ "success": true, "post_id": "123", "deleted": "success", "error_message": null }
Configuration Example
wordpress: base_url: "https://example.com" username: "admin" password: "your-application-password"
Conclusion
The WordPress API Connector offers a comprehensive solution for programmatically creating and deleting posts through seamless integration with the WordPress platform. With its create-post and delete-post endpoints, it delivers a reliable framework for automating content management tasks, enhancing efficiency, and streamlining interactions with WordPress sites. Proper configuration and utilization of the WordPress API Connector ensure effective management of content-related operations.


56. Workable API Connector
The Workable API Connector provides a seamless and efficient system for managing recruitment and candidate workflows by integrating with the Workable platform. It serves as an essential tool for creating, updating, retrieving, and managing candidates and job listings within applications.
Inputs Required
                  * API Key: The API key generated from your Workable account (required).
                  * Subdomain: The unique identifier for your Workable account (e.g., "techinnovators" from "<a href="https://techinnovators.workable.com"">https://techinnovators.workable.com") (required).
Output Format
                  * Success: Boolean indicator of operation success or failure.
                  * Data: The returned data specific to each action (e.g., candidate details, job listings, etc.).
                  * Error Message: Detailed information if an operation fails.
API Endpoints
POST /workable-connector/create-candidate
Description
Creates a new candidate in the Workable system.
Inputs
                  * shortcode (string): The job’s shortcode (required).
                  * sourced (boolean): Indicates if the candidate is sourced (uploaded) or not (applied) (required).
                  * name (string, optional): Full name of the candidate (optional if firstname and lastname are provided).
                  * firstname (string, optional): Candidate’s first name (optional if name is provided).
                  * lastname (string, optional): Candidate’s last name (optional if name is provided).
                  * email (string): Candidate’s email (required).
                  * headline (string, optional): One-line description of the candidate.
                  * summary (string, optional): Profile summary of the candidate.
                  * address (string, optional): Candidate’s address.
                  * phone (string, optional): Candidate’s phone number.
                  * cover_letter (string, optional): Candidate’s cover letter.
                  * education_entries (array, optional): List of education entries (school required, degree, start_date, end_date).
                  * experience_entries (array, optional): List of experience entries (title required, summary, company, start_date, end_date in ISO 8601 format).
                  * answers (array, optional): List of answers (question_key required, response required).
                  * skills (array, optional): List of candidate’s skills.
                  * social_profiles (array, optional): List of social profile URLs.
Outputs
                  * success (boolean): Indicates if the candidate was created successfully.
                  * data (object): Details of the created candidate, including candidate_id.
                  * error_message (string): Error details if the operation fails.
Example Response
{ "success": true, "data": { "candidate_id": "cand_123", "name": "John Doe", "email": "john.doe@example.com" }, "error_message": null }
GET /workable-connector/list-candidates
Description
Retrieves a list of all candidates in the Workable system.
Inputs
                  * shortcode (string, optional): The job’s shortcode.
                  * email (string, optional): Candidate’s email.
                  * stage (string, optional): Candidate stage (e.g., "applied", "interview", "hired").
                  * limit (integer, optional): Maximum number of candidates to fetch (default: 20).
                  * since_id (string, optional): Fetch candidates with ID >= this value.
                  * max_id (string, optional): Fetch candidates with ID <= this value.
                  * created_after (datetime, optional): Fetch candidates created after this timestamp.
                  * updated_after (datetime, optional): Fetch candidates updated after this timestamp.
Outputs
                  * success (boolean): Indicates if the list was retrieved successfully.
                  * data (array): List of candidate objects.
                  * error_message (string): Error details if the operation fails.
Example Response
{ "success": true, "data": [ {"candidate_id": "cand_123", "name": "John Doe", "email": "john.doe@example.com"}, {"candidate_id": "cand_124", "name": "Jane Smith", "email": "jane.smith@example.com"} ], "error_message": null }
GET /workable-connector/list-jobs
Description
Retrieves a list of all job postings in the Workable system.
Inputs
                  * state (string, optional): Job state (e.g., "draft", "published", "archived", "closed").
                  * limit (integer, optional): Maximum number of jobs to fetch (default: 20).
                  * since_id (string, optional): Fetch jobs with ID >= this value.
                  * max_id (string, optional): Fetch jobs with ID <= this value.
                  * created_after (string, optional): Fetch jobs created after this datetime.
                  * updated_after (string, optional): Fetch jobs updated after this datetime.
Outputs
                  * success (boolean): Indicates if the list was retrieved successfully.
                  * data (array): List of job objects.
                  * error_message (string): Error details if the operation fails.
Example Response
{ "success": true, "data": [ {"job_id": "job_001", "title": "Software Engineer", "state": "published"}, {"job_id": "job_002", "title": "Product Manager", "state": "draft"} ], "error_message": null }
GET /workable-connector/list-members
Description
Retrieves a list of all members in the Workable account.
Inputs
                  * shortcode (string, optional): The job’s shortcode.
                  * email (string, optional): Member’s email.
                  * name (string, optional): Member’s full name.
                  * role (string, optional): Member’s role (e.g., "admin", "recruiter", "reviewer").
                  * limit (integer, optional): Maximum number of members to fetch (default: 20).
                  * since_id (string, optional): Fetch members with ID >= this value.
                  * max_id (string, optional): Fetch members with ID <= this value.
Outputs
                  * success (boolean): Indicates if the list was retrieved successfully.
                  * data (array): List of member objects.
                  * error_message (string): Error details if the operation fails.
Example Response
{ "success": true, "data": [ {"member_id": "mem_001", "name": "Alice Brown", "role": "admin"}, {"member_id": "mem_002", "name": "Bob White", "role": "recruiter"} ], "error_message": null }
GET /workable-connector/retrieve-candidate
Description
Retrieves the details of a specific candidate by ID.
Inputs
                  * candidate_id (string): The candidate’s ID (required).
Outputs
                  * success (boolean): Indicates if the candidate was retrieved successfully.
                  * data (object): Details of the retrieved candidate.
                  * error_message (string): Error details if the operation fails.
Example Response
{ "success": true, "data": { "candidate_id": "cand_123", "name": "John Doe", "email": "john.doe@example.com", "stage": "interview" }, "error_message": null }
PATCH /workable-connector/update-candidate
Description
Updates the details of an existing candidate.
Inputs
                  * candidate_id (string): The candidate’s ID (required).
                  * name (string, optional): Full name (optional if firstname and lastname provided).
                  * firstname (string, optional): First name (optional if name provided).
                  * lastname (string, optional): Last name (optional if name provided).
                  * email (string): Candidate’s email (required).
                  * headline (string, optional): One-line description.
                  * summary (string, optional): Profile summary.
                  * address (string, optional): Candidate’s address.
                  * phone (string, optional): Candidate’s phone number.
                  * cover_letter (string, optional): Candidate’s cover letter.
                  * education_entries (array, optional): List of education entries.
                  * experience_entries (array, optional): List of experience entries.
                  * answers (array, optional): List of answers.
                  * skills (array, optional): List of skills.
                  * social_profiles (array, optional): List of social profile URLs.
Outputs
                  * success (boolean): Indicates if the candidate was updated successfully.
                  * data (object): Details of the updated candidate.
                  * error_message (string): Error details if the operation fails.
Example Response
{ "success": true, "data": { "candidate_id": "cand_123", "name": "John Doe", "email": "john.doe@newemail.com" }, "error_message": null }
Configuration Example
workable: api_key: "your-api-key-here" subdomain: "techinnovators"
Conclusion
The Workable API Connector offers a comprehensive solution for managing recruitment and candidate workflows by providing visibility into candidates, jobs, and team members. With its endpoints for creating, updating, retrieving, and listing data, it delivers a reliable framework for automating hiring processes and enhancing recruitment efficiency. Proper utilization of the Workable API Connector ensures streamlined management of recruitment-related operations.


57. YouTube API Connector
The YouTube API Connector provides a seamless and efficient system for retrieving video data from the YouTube platform. It serves as an essential tool for programmatically accessing valuable video information within applications.
Inputs Required
                  * API Key: The API key generated from your Google Cloud project with access to the YouTube Data API (required).
                  * Videos: A comma-separated string of YouTube video IDs to retrieve data from (required).
Output Format
                  * Success: Boolean indicator of operation success or failure.
                  * Video IDs: The list of requested YouTube video IDs.
                  * Data: The retrieved data for each video (e.g., title, description, etc.).
                  * Published At: The timestamp when each video was published (optional).
                  * Channel ID: The ID of the channel that uploaded each video (optional).
                  * Error Message: Detailed information if an operation fails.
API Endpoints
GET /youtube-connector/pull-video-data
Description
Fetches data about the specified YouTube video IDs and ingests it into the application.
Inputs
                  * videos (string): A comma-separated string of YouTube video IDs (e.g., "dQw4w9WgXcQ, abc123xyz789") (required).
Outputs
                  * success (boolean): Indicates if the video data was retrieved successfully.
                  * video_ids (array of strings): The list of requested YouTube video IDs.
                  * data (array of objects): The retrieved data for each video, including title, description, etc.
                  * published_at (array of strings, optional): The timestamp when each video was published (e.g., "2023-05-15T10:30:00Z").
                  * channel_id (array of strings, optional): The ID of the channel that uploaded each video.
                  * error_message (string): Error details if the operation fails.
Example Configuration
youtube: api_key: "your-youtube-api-key-here" videos: "dQw4w9WgXcQ, abc123xyz789"
Example Response
{ "success": true, "video_ids": ["dQw4w9WgXcQ", "abc123xyz789"], "data": [ { "title": "Rick Astley - Never Gonna Give You Up", "description": "Official music video...", "duration": "PT3M33S" }, { "title": "Sample Video", "description": "This is a test video...", "duration": "PT5M12S" } ], "published_at": [ "2009-10-25T06:57:33Z", "2023-01-10T14:20:00Z" ], "channel_id": [ "channel_123", "channel_456" ], "error_message": null }
Conclusion
The YouTube API Connector offers a comprehensive solution for programmatically retrieving video data through seamless integration with the YouTube platform. With its pull-video-data endpoint, it delivers a reliable framework for automating video data retrieval tasks, enhancing information processing, and improving productivity. Proper configuration and utilization of the YouTube API Connector ensure efficient access to valuable video information from the YouTube ecosystem.

58. Zoho Recruit API Connector
The Zoho Recruit API Connector provides a seamless and efficient system for managing job openings, candidates, and applications by integrating with the Zoho Recruit platform. It serves as an essential tool for automating recruitment workflows within applications.
Inputs Required
                  * Access Token: OAuth Access Token for authentication (required, refreshed automatically using the refresh token).
                  * Refresh Token: OAuth Refresh Token for maintaining access (required).
                  * Locations Endpoint: The location of your Zoho account (e.g., "in", "eu", "com.au", "jp", "uk", "ca", "sa", "com") (required).
Output Format
                  * Success: Boolean indicator of operation success or failure.
                  * Data: The returned data specific to each action (e.g., job opening details, candidate details, etc.).
                  * Error Message: Detailed information if an operation fails.
API Endpoints
POST /zoho-recruit-connector/create-job-openings
Description
Creates one or multiple job openings in Zoho Recruit.
Inputs
                  * data (array of objects): List of job opening details.
                  * Job_Opening_Name (string, required): Name of the job opening.
                  * Number_of_Positions (string, optional): Number of available positions.
                  * Department_Name (object, optional): Department details (id and name).
                  * Assigned_Recruiter (string, optional): Assigned recruiter’s name.
                  * Target_Date (string, optional): Target hiring date.
                  * Job_Opening_Status (string, optional): Status of the job opening.
                  * Job_Type (string, optional): Type of job.
                  * Required_Skills (string, optional): Required skills.
                  * Remote_Job (boolean, optional): Indicates if the job is remote.
Outputs
                  * success (boolean): Indicates if the job openings were created successfully.
                  * data (array of objects): Details of the created job openings, including IDs.
                  * error_message (string): Error details if the operation fails.
Example Response
{ "success": true, "data": [ {"id": "job_123", "Job_Opening_Name": "Software Engineer"}, {"id": "job_124", "Job_Opening_Name": "Product Manager"} ], "error_message": null }
GET /zoho-recruit-connector/list-job-openings
Description
Retrieves a list of job openings from Zoho Recruit.
Inputs
                  * fields (string, optional): Fields to retrieve (default: "Job_Opening_Name,Number_of_Positions,Job_Opening_Status,Job_Type,Required_Skills").
                  * page (integer, optional): Page number (default: 1).
                  * per_page (integer, optional): Records per page (default: 200).
                  * sort_order (string, optional): Sort order (default: "desc").
                  * sort_by (string, optional): Sort field (default: "Modified_Time").
                  * approved (boolean, optional): Filter by approval status.
                  * cvid (integer, optional): Custom view ID.
                  * territory_id (integer, optional): Territory ID.
                  * include_child (boolean, optional): Include child records.
Outputs
                  * success (boolean): Indicates if the list was retrieved successfully.
                  * data (array of objects): List of job openings.
                  * error_message (string): Error details if the operation fails.
Example Response
{ "success": true, "data": [ {"id": "job_123", "Job_Opening_Name": "Software Engineer", "Job_Opening_Status": "Open"}, {"id": "job_124", "Job_Opening_Name": "Product Manager", "Job_Opening_Status": "Closed"} ], "error_message": null }
POST /zoho-recruit-connector/create-candidates
Description
Creates one or multiple candidates in Zoho Recruit.
Inputs
                  * data (array of objects): List of candidate details.
                  * First_Name (string, optional): Candidate’s first name.
                  * Last_Name (string, required): Candidate’s last name.
                  * Email (string, optional): Candidate’s email.
                  * Mobile (string, optional): Candidate’s mobile number.
                  * Current_Job_Title (string, optional): Current job title.
                  * Total_Experience (string, optional): Total years of experience.
                  * Current_Employer (string, optional): Current employer.
                  * Skills (string, optional): Candidate’s skills.
                  * Expected_Salary (string, optional): Expected salary.
                  * Current_Salary (string, optional): Current salary.
                  * Notice_Period (string, optional): Notice period.
Outputs
                  * success (boolean): Indicates if the candidates were created successfully.
                  * data (array of objects): Details of the created candidates, including IDs.
                  * error_message (string): Error details if the operation fails.
Example Response
{ "success": true, "data": [ {"id": "cand_001", "Last_Name": "Doe", "Email": "john.doe@example.com"}, {"id": "cand_002", "Last_Name": "Smith", "Email": "jane.smith@example.com"} ], "error_message": null }
GET /zoho-recruit-connector/list-candidates
Description
Retrieves a list of candidates from Zoho Recruit.
Inputs
                  * fields (string, optional): Fields to retrieve (default: "First_Name,Last_Name,Email").
                  * page (integer, optional): Page number (default: 1).
                  * per_page (integer, optional): Records per page (default: 200).
                  * sort_order (string, optional): Sort order (default: "desc").
                  * sort_by (string, optional): Sort field (default: "Modified_Time").
                  * approved (boolean, optional): Filter by approval status.
Outputs
                  * success (boolean): Indicates if the list was retrieved successfully.
                  * data (array of objects): List of candidates.
                  * error_message (string): Error details if the operation fails.
Example Response
{ "success": true, "data": [ {"id": "cand_001", "Last_Name": "Doe", "Email": "john.doe@example.com"}, {"id": "cand_002", "Last_Name": "Smith", "Email": "jane.smith@example.com"} ], "error_message": null }
GET /zoho-recruit-connector/list-applications
Description
Retrieves a list of applications from Zoho Recruit.
Inputs
                  * fields (string, optional): Fields to retrieve (default: "Candidate,Job_Opening,Status").
                  * page (integer, optional): Page number (default: 1).
                  * per_page (integer, optional): Records per page (default: 200).
                  * sort_order (string, optional): Sort order (default: "desc").
                  * sort_by (string, optional): Sort field (default: "Modified_Time").
Outputs
                  * success (boolean): Indicates if the list was retrieved successfully.
                  * data (array of objects): List of applications.
                  * error_message (string): Error details if the operation fails.
Example Response
{ "success": true, "data": [ {"id": "app_001", "Candidate": "cand_001", "Job_Opening": "job_123", "Status": "Applied"}, {"id": "app_002", "Candidate": "cand_002", "Job_Opening": "job_124", "Status": "Interview"} ], "error_message": null }
PATCH /zoho-recruit-connector/update-job-openings
Description
Updates one or multiple job openings in Zoho Recruit.
Inputs
                  * data (array of objects): List of job opening updates.
                  * id (string, required): ID of the job opening.
                  * Job_Opening_Name (string, optional): Updated name.
                  * Number_of_Positions (string, optional): Updated number of positions.
                  * Department_Name (object, optional): Updated department details.
                  * Assigned_Recruiter (string, optional): Updated recruiter.
                  * Target_Date (string, optional): Updated target date.
                  * Job_Opening_Status (string, optional): Updated status.
                  * Job_Type (string, optional): Updated job type.
                  * Required_Skills (string, optional): Updated skills.
                  * Remote_Job (boolean, optional): Updated remote status.
Outputs
                  * success (boolean): Indicates if the job openings were updated successfully.
                  * data (array of objects): Details of the updated job openings.
                  * error_message (string): Error details if the operation fails.
Example Response
{ "success": true, "data": [ {"id": "job_123", "Job_Opening_Name": "Senior Software Engineer"} ], "error_message": null }
PATCH /zoho-recruit-connector/update-candidates
Description
Updates one or multiple candidates in Zoho Recruit.
Inputs
                  * data (array of objects): List of candidate updates.
                  * id (string, required): ID of the candidate.
                  * First_Name (string, optional): Updated first name.
                  * Last_Name (string, optional): Updated last name.
                  * Email (string, optional): Updated email.
                  * Mobile (string, optional): Updated mobile number.
                  * Current_Job_Title (string, optional): Updated job title.
                  * Total_Experience (string, optional): Updated experience.
                  * Current_Employer (string, optional): Updated employer.
                  * Skills (string, optional): Updated skills.
                  * Expected_Salary (string, optional): Updated expected salary.
                  * Current_Salary (string, optional): Updated current salary.
                  * Notice_Period (string, optional): Updated notice period.
Outputs
                  * success (boolean): Indicates if the candidates were updated successfully.
                  * data (array of objects): Details of the updated candidates.
                  * error_message (string): Error details if the operation fails.
Example Response
{ "success": true, "data": [ {"id": "cand_001", "Last_Name": "Doe", "Email": "john.doe@newemail.com"} ], "error_message": null }
DELETE /zoho-recruit-connector/delete-candidates
Description
Deletes one or multiple candidates from Zoho Recruit.
Inputs
                  * ids (array of strings): List of candidate IDs to delete (required).
                  * wf_trigger (boolean, optional): Trigger workflows during deletion (default: true).
Outputs
                  * success (boolean): Indicates if the candidates were deleted successfully.
                  * data (object): Response from the delete operation.
                  * error_message (string): Error details if the operation fails.
Example Response
{ "success": true, "data": {"deleted_ids": ["cand_001", "cand_002"]}, "error_message": null }
DELETE /zoho-recruit-connector/delete-job-openings
Description
Deletes one or multiple job openings from Zoho Recruit.
Inputs
                  * ids (array of strings): List of job opening IDs to delete (required).
                  * wf_trigger (boolean, optional): Trigger workflows during deletion (default: true).
Outputs
                  * success (boolean): Indicates if the job openings were deleted successfully.
                  * data (object): Response from the delete operation.
                  * error_message (string): Error details if the operation fails.
Example Response
{ "success": true, "data": {"deleted_ids": ["job_123", "job_124"]}, "error_message": null }
Configuration Example
zoho_recruit: 
access_token: "your-access-token-here" 
refresh_token: "your-refresh-token-here" 
locations_endpoint: "com"
Conclusion
The Zoho Recruit API Connector offers a comprehensive solution for managing recruitment workflows by providing visibility into job openings, candidates, and applications. With its endpoints for creating, updating, listing, and deleting data, it delivers a reliable framework for automating hiring processes and enhancing recruitment efficiency. Proper utilization of the Zoho Recruit API Connector ensures streamlined management of recruitment-related operations.